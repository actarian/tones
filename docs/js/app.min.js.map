{"version":3,"sources":["docs/js/app.js"],"names":["Song","Tone","Volume","getMp3","filter","Filter","type","frequency","rolloff","Q","gain","toMaster","player","Player","url","loop","playbackRate","sync","start","Transport","timeSignature","bpm","value","loopStart","loopEnd","synth","DuoSynth","vibratoAmount","vibratoRate","portamento","harmonicity","volume","voice0","oscillator","envelope","attack","decay","sustain","release","filterEnvelope","baseFrequency","octaves","voice1","notes","note","song","effects","instruments","stop","pause","theremin","drag","d","divideScalar","x","Math","abs","y","z","max","min","i","length","round","setNote","speed","set","triggerAttack","triggerRelease","setSpeed","getSong","compressor","Compressor","threshold","ratio","distortion","Distortion","wet","hats","retrigger","fadeOut","chain","Loop","callback","time","interval","probability","snare","part","Sequence","velocity","gainToDb","kick","MembraneSynth","pitchDecay","connect","random","bass","FMSynth","modulationIndex","carrier","partials","modulator","Part","event","prob","triggerAttackRelease","dur","getSynth","Synth","modulationType","attackCurve","Master","window","Detector","webgl","container","document","querySelector","DEBUG","SHOW_RING","SHADOW_SIZE","T","textureTypes","DIFFUSE","BUMP","LIGHT","ALPHA","RAD","PI","stats","Stats","showPanel","dom","setAttribute","appendChild","dragging","camera","scene","renderer","orbit","light","geometry","material","group","plane","connector","emitter","ring","cover","disc","label","envMap","bumpMap","diffuseMap","roughnessMap","metalnessMap","performance","Date","ticks","connectors","hittables","getDiscTextures","init","animate","addEventListener","resize","addGetWebGLMessage","THREE","Scene","add","AmbientLight","PerspectiveCamera","offsetWidth","offsetHeight","position","lookAt","aspect","updateProjectionMatrix","fit","object","offset","up","Vector3","box","Box3","boxSize","center","setFromObject","getCenter","applyMatrix4","matrixWorldInverse","getSize","size","sin","fov","normalize","multiplyScalar","distance","distanceTo","target","maxDistance","update","far","SpotLight","castShadow","shadow","mapSize","width","height","near","radius","Group","PlaneGeometry","ShadowMaterial","opacity","side","DoubleSide","Mesh","rotation","receiveShadow","TextureLoader","load","mapping","EquirectangularReflectionMapping","magFilter","LinearFilter","minFilter","LinearMipMapLinearFilter","SphereGeometry","MeshStandardMaterial","color","roughness","metalness","envMapIntensity","push","BoxGeometry","transparent","RingGeometry","map","bumpScale","WebGLRenderer","antialias","alpha","logarithmicDepthBuffer","setPixelRatio","devicePixelRatio","setSize","shadowMap","enabled","gammaInput","gammaOutput","PCFSoftShadowMap","DragControls","domElement","e","a","clone","b","sub","TweenLite","to","ease","Power2","easeOut","onUpdate","onComplete","Elastic","setTimeout","begin","speed33","now","shift","getFps","s","scale","render","end","requestAnimationFrame","clearDepth","w","h","canvas","createElement","ctx","getContext","from","circle","fill","stroke","lineWidth","beginPath","arc","fillStyle","strokeStyle","closePath","rect","r","t","texture","CanvasTexture","UVMapping","ClampToEdgeWrapping","RGBFormat","UnsignedByteType","body"],"mappings":"CAEC,WACG,aAEA,IAAIA,EAAO,WAEM,IAAIC,KAAKC,QAAQ,KAE9B,SAASF,KAydT,OAvdAA,EAAKG,OAIL,WAGI,IAAIC,EAAS,IAAIH,KAAKI,OAAO,CACzBC,KAAM,UACNC,UAAW,IACXC,SAAU,GACVC,EAAG,EACHC,KAAM,IACPC,WAECC,EAAS,IAAIX,KAAKY,OAAO,CACzBC,IAAK,0CACLC,MAAM,EACNC,aAAc,KACfL,WAAWM,OAAOC,MAAM,KAE3BjB,KAAKkB,UAAUC,cAAgB,EAC/BnB,KAAKkB,UAAUE,IAAIC,MAAQ,GAC3BrB,KAAKkB,UAAUJ,MAAO,EACtBd,KAAKkB,UAAUI,UAAY,IAC3BtB,KAAKkB,UAAUK,QAAU,OAGzB,IAAIC,EAAQ,IAAIxB,KAAKyB,SAAS,CAC1BC,cAAe,GACfC,YAAa,EACbC,WAAY,GACZC,YAAa,MACbC,OAAQ,EACRC,OAAQ,CACJD,QAAS,EACTE,WAAY,CACR3B,KAAM,YAEVF,OAAQ,CACJK,EAAG,EACHH,KAAM,UACNE,SAAU,IAEd0B,SAAU,CACNC,OAAQ,IACRC,MAAO,IACPC,QAAS,GACTC,QAAS,KAEbC,eAAgB,CACZJ,OAAQ,KACRC,MAAO,IACPC,QAAS,GACTC,QAAS,EACTE,cAAe,IACfC,QAAS,IAGjBC,OAAQ,CACJX,QAAS,GACTE,WAAY,CACR3B,KAAM,YAEVF,OAAQ,CACJK,EAAG,EACHH,KAAM,WACNE,SAAU,IAEd0B,SAAU,CACNC,OAAQ,IACRC,MAAO,EACPC,QAAS,GACTC,QAAS,IAEbC,eAAgB,CACZJ,OAAQ,IACRC,MAAO,IACPC,QAAS,GACTC,QAAS,EACTE,cAAe,IACfC,SAAU,QAGnB9B,WACHc,EAAMkB,MAAQ,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC/GlB,EAAMmB,KAAOnB,EAAMkB,MAAM,GAEzB,IAAIE,EAAO,CACPC,QAAS,CACL1C,OAAQA,GAEZ2C,YAAa,CACTnC,OAAQA,EACRa,MAAOA,GAEXP,MAAO,WACHjB,KAAKkB,UAAUD,MAAM,SAEzB8B,KAAM,WACF/C,KAAKkB,UAAU8B,SAEnBC,SAAU,CACNC,KAAM,SAAUC,GACZA,EAAIA,EAAEC,aAAa,IACnB,IAAIC,EAAIC,KAAKC,IAAIJ,EAAEE,GACfG,EAAIF,KAAKC,IAAIJ,EAAEM,GACnBJ,EAAIC,KAAKI,IAAI,EAAGJ,KAAKK,IAAI,EAAGN,IAC5BG,EAAIF,KAAKI,IAAI,EAAGJ,KAAKK,IAAI,EAAGH,IAC5B,IAAII,EAAIN,KAAKI,IAAI,EAAGJ,KAAKK,IAAInC,EAAMkB,MAAMmB,OAAS,EAAGP,KAAKQ,MAAMN,EAAIhC,EAAMkB,MAAMmB,OAAS,KACrFlB,EAAOnB,EAAMkB,MAAMlB,EAAMkB,MAAMmB,OAAS,EAAID,GAC5CpC,EAAMmB,OAASA,IACfnB,EAAMmB,KAAOA,EACbnB,EAAMuC,QAAQpB,IAElBnB,EAAME,cAAcL,MAAY,GAAJgC,EACT,IAAfT,EAAKoB,OACL7D,EAAO8D,IAAI,SAAoB,IAAQZ,EAAjB,MAI9BpC,MAAO,WACHO,EAAM0C,cAAc1C,EAAMmB,OAE9BI,KAAM,WACFvB,EAAM2C,mBAGdH,MAAO,EACPI,SAAU,SAAUf,GAChBA,EAAIC,KAAKI,IAAI,EAAGJ,KAAKK,IAAI,EAAGN,IAC5B1C,EAAOsD,IAAI,eAAgB,GAAM,IAAOZ,GACxClD,EAAO8D,IAAI,SAAoB,IAAQZ,EAAjB,OAG9B,OAAOT,GAtIX7C,EAAKsE,QA0IL,WAGI,IAAIlE,EAAS,IAAIH,KAAKI,OAAO,CACzBC,KAAM,UACNC,UAAW,IACXC,SAAU,GACVC,EAAG,EACHC,KAAM,IACPC,WAGC4D,EAAa,IAAItE,KAAKuE,WAAW,CACjCC,WAAY,GACZC,MAAO,EACPvC,OAAQ,GACRG,QAAS,KACV3B,WAGCgE,EAAa,IAAI1E,KAAK2E,WAAW,CACjCD,WAAY,GACZE,IAAK,KAILC,EAAO,IAAI7E,KAAKY,OAAO,CACvBC,IAAK,yBACLiB,QAAS,GACTgD,WAAW,EACXC,QAAS,MACVC,MAAMN,EAAYJ,GACrBO,EAAK/D,KAAO,IAAId,KAAKiF,KAAK,CACtBC,SAAU,SAAUC,GAChBN,EAAK5D,MAAMkE,GAAMpC,KAAKoC,EAAO,MAEjCC,SAAU,MACVC,YAAa,KACdpE,MAAM,MAGT,IAAIqE,EAAQ,IAAItF,KAAKY,OAAO,CACxBC,IAAK,4BACLiE,WAAW,EACXC,QAAS,KACVC,MAAMN,EAAYJ,GACrBgB,EAAMC,KAAO,IAAIvF,KAAKwF,SAAS,SAAUL,EAAMM,GAC3CH,EAAMxD,OAAOT,MAAQrB,KAAK0F,SAASD,GACnCH,EAAMrE,MAAMkE,GAAMpC,KAAKoC,EAAO,KAC/B,CAAC,KAAM,EAAG,KAAM,CAAC,EAAG,MAAOlE,MAAM,GAGpC,IAAI0E,EAAO,IAAI3F,KAAK4F,cAAc,CAC9BC,WAAY,IACZrD,QAAS,EACTR,WAAY,CACR3B,KAAM,WAEV4B,SAAU,CACNC,OAAQ,KACRC,MAAO,GACPC,QAAS,KAEd0D,QAAQxB,GACXqB,EAAKJ,KAAO,IAAIvF,KAAKwF,SAAS,SAAUL,EAAME,GACtC/B,KAAKyC,SAAWV,GAChBM,EAAKzB,cAAc,KAAMiB,IAE9B,CAAC,EAAG,CAAC,EAAG,CAAC,KAAM,KAAO,EAAG,CAAC,EAAG,CAAC,KAAM,KAAO,EAAG,EAAG,EAAG,CAAC,EAAG,CAAC,KAAM,MAAQ,MAAMlE,MAAM,GAGtF,IAAI+E,EAAO,IAAIhG,KAAKiG,QAAQ,CACxBpE,YAAa,EACbqE,gBAAiB,IACjBC,QAAS,CACLnE,WAAY,CACR3B,KAAM,SACN+F,SAAU,CAAC,EAAG,EAAG,EAAG,IAExBnE,SAAU,CACNC,OAAQ,IACRC,MAAO,GACPC,QAAS,IAGjBiE,UAAW,CACPrE,WAAY,CACR3B,KAAM,UAEV4B,SAAU,CACNC,OAAQ,GACRC,MAAO,GACPC,QAAS,GACTC,QAAS,QAGlB3B,WACHsF,EAAKT,KAAO,IAAIvF,KAAKsG,KAAK,SAAUnB,EAAMoB,GAClCjD,KAAKyC,SAAWQ,EAAMC,MACtBR,EAAKS,qBAAqBF,EAAM5D,KAAM4D,EAAMG,IAAKvB,IAEtD,CAAC,CACAA,KAAM,MACNxC,KAAM,KACN+D,IAAK,MACLF,KAAM,GACP,CACCrB,KAAM,MACNxC,KAAM,KACN+D,IAAK,KACLF,KAAM,IACP,CACCrB,KAAM,WACNxC,KAAM,KACN+D,IAAK,KACLF,KAAM,IACP,CACCrB,KAAM,YACNxC,KAAM,KACN+D,IAAK,KACLF,KAAM,IACP,CACCrB,KAAM,MACNxC,KAAM,KACN+D,IAAK,MACLF,KAAM,GACP,CACCrB,KAAM,MACNxC,KAAM,KACN+D,IAAK,KACLF,KAAM,IACP,CACCrB,KAAM,WACNxC,KAAM,KACN+D,IAAK,KACLF,KAAM,IACP,CACCrB,KAAM,YACNxC,KAAM,KACN+D,IAAK,KACLF,KAAM,IACP,CACCrB,KAAM,MACNxC,KAAM,KACN+D,IAAK,MACLF,KAAM,GACP,CACCrB,KAAM,MACNxC,KAAM,KACN+D,IAAK,KACLF,KAAM,IACP,CACCrB,KAAM,WACNxC,KAAM,KACN+D,IAAK,KACLF,KAAM,IACP,CACCrB,KAAM,YACNxC,KAAM,KACN+D,IAAK,KACLF,KAAM,IACP,CACCrB,KAAM,MACNxC,KAAM,KACN+D,IAAK,MACLF,KAAM,GACP,CACCrB,KAAM,MACNxC,KAAM,KACN+D,IAAK,KACLF,KAAM,IACP,CACCrB,KAAM,WACNxC,KAAM,KACN+D,IAAK,KACLF,KAAM,IACP,CACCrB,KAAM,YACNxC,KAAM,KACN+D,IAAK,KACLF,KAAM,MACNvF,MAAM,GACV+E,EAAKT,KAAKzE,MAAO,EACjBkF,EAAKT,KAAKhE,QAAU,KAGpB,IAAIC,EAAQ,IAAIxB,KAAKyB,SAAS,CAC1BC,cAAe,GACfC,YAAa,EACbC,WAAY,GACZC,YAAa,MACbC,OAAQ,EACRC,OAAQ,CACJD,QAAS,EACTE,WAAY,CACR3B,KAAM,YAEVF,OAAQ,CACJK,EAAG,EACHH,KAAM,UACNE,SAAU,IAEd0B,SAAU,CACNC,OAAQ,IACRC,MAAO,IACPC,QAAS,GACTC,QAAS,KAEbC,eAAgB,CACZJ,OAAQ,KACRC,MAAO,IACPC,QAAS,GACTC,QAAS,EACTE,cAAe,IACfC,QAAS,IAGjBC,OAAQ,CACJX,QAAS,GACTE,WAAY,CACR3B,KAAM,YAEVF,OAAQ,CACJK,EAAG,EACHH,KAAM,WACNE,SAAU,IAEd0B,SAAU,CACNC,OAAQ,IACRC,MAAO,EACPC,QAAS,GACTC,QAAS,IAEbC,eAAgB,CACZJ,OAAQ,IACRC,MAAO,IACPC,QAAS,GACTC,QAAS,EACTE,cAAe,IACfC,SAAU,QAGnB9B,WAsDH,OArDAc,EAAMkB,MAAQ,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAC/GlB,EAAMmB,KAAOnB,EAAMkB,MAAM,GAEzB1C,KAAKkB,UAAUE,IAAIC,MAAQ,EAEhB,CACPwB,QAAS,CACL1C,OAAQA,EACRmE,WAAYA,EACZI,WAAYA,GAEhB5B,YAAa,CACT+B,KAAMA,EACNS,MAAOA,EACPK,KAAMA,EACNK,KAAMA,EACNxE,MAAOA,GAEXP,MAAO,WACHjB,KAAKkB,UAAUD,MAAM,SAEzB8B,KAAM,WACF/C,KAAKkB,UAAU6B,QAEnBE,SAAU,CACNC,KAAM,SAAUC,GACZA,EAAIA,EAAEC,aAAa,IACnB,IAAIC,EAAIC,KAAKC,IAAIJ,EAAEE,GACfG,EAAIF,KAAKC,IAAIJ,EAAEM,GACnBJ,EAAIC,KAAKI,IAAI,EAAGJ,KAAKK,IAAI,EAAGN,IAC5BG,EAAIF,KAAKI,IAAI,EAAGJ,KAAKK,IAAI,EAAGH,IAC5B,IAAII,EAAIN,KAAKI,IAAI,EAAGJ,KAAKK,IAAInC,EAAMkB,MAAMmB,OAAS,EAAGP,KAAKQ,MAAMN,EAAIhC,EAAMkB,MAAMmB,OAAS,KACrFlB,EAAOnB,EAAMkB,MAAMlB,EAAMkB,MAAMmB,OAAS,EAAID,GAC5CpC,EAAMmB,OAASA,IACfnB,EAAMmB,KAAOA,EACbnB,EAAMuC,QAAQpB,IAElBnB,EAAME,cAAcL,MAAY,GAAJgC,GAEhCpC,MAAO,WACHO,EAAM0C,cAAc1C,EAAMmB,OAE9BI,KAAM,WACFvB,EAAM2C,mBAGdH,MAAO,EACPI,SAAU,SAAUf,GAChBA,EAAIC,KAAKI,IAAI,EAAGJ,KAAKK,IAAI,EAAGN,IAC5BrD,KAAKkB,UAAUE,IAAIC,MAAQ,EAAIiC,KAAKQ,MAAU,IAAJT,GAC1ClD,EAAO8D,IAAI,SAAoB,IAAQZ,EAAjB,QA9alCtD,EAAK4G,SAobL,SAAkB7E,GACd,IAAIN,EAAQ,IAAIxB,KAAK4G,MAAM,CACvB5E,WAAY,CACR3B,KAAM,aACNwB,YAAa,GACbgF,eAAgB,QAEpB5E,SAAU,CACN6E,YAAa,cACb5E,OAAQ,IACRC,MAAO,GACPC,QAAS,GACTC,QAAS,KAEbT,WAAY,MAgBhB,OAHAJ,EAAMwD,MAAMlD,EAAQ9B,KAAK+G,QAGlBvF,GAGJzB,EA7dA,GAieXiH,OAAOjH,KAAOA,EApelB,GAyeC,WACG,aAEA,GAAKkH,SAASC,MAAd,CAKA,IAAIC,EAAYC,SAASC,cAAc,kBAEnCzE,EAAO7C,KAAKG,SAMZoH,GAAQ,EACRC,GAAY,EAEZC,EAAc,KACdC,EAAI,EACJC,EAAe,CACfC,QAAS,EACTC,KAAM,EACNC,MAAO,EACPC,MAAO,GAGPC,EAAMzE,KAAK0E,GAAK,IAMhBC,EAAQ,IAAIC,MAChBD,EAAME,UAAU,GACDF,EAAMG,IACZC,aAAa,QAAS,SAE3Bf,GACAH,EAAUmB,YAAYL,EAAMG,KAGhC,IAESG,EAKLC,EAAwCC,EAAOC,EAAUC,EAAOzF,EAChE0F,EACAC,EAAUC,EACVC,EAAOC,EAAOC,EAAWC,EAASC,EAAMC,EAAOC,EAAMC,EAErDC,EAAQC,EAASC,EAAYC,EAAcC,EAZ3CC,EAAe5C,OAAO4C,aAAeC,KACrCC,EAAQ,GAGRC,EAAa,GACbC,EAAY,GAShBR,EAAUS,EAAgBvC,EAAaE,MACvC8B,EAAeO,EAAgBvC,EAAaG,MAAO,KACnD4B,EAAaQ,EAAgBvC,EAAaC,QAAS,KACnDgC,EAAeM,EAAgBvC,EAAaG,MAAO,KAS/CqC,IACAC,IA8gBJnD,OAAOoD,iBAAiB,SAAUC,GAAQ,QAhlBtCpD,SAASqD,qBAqEb,SAASJ,IA+XT,IACQ1B,GA9XJC,EAAQ,IAAI8B,MAAMC,OAEZC,IAAI,IAAIF,MAAMG,aAAa,WA4X7BlC,EAAS,IAAI+B,MAAMI,kBAAkB,GAAIxD,EAAUyD,YAAczD,EAAU0D,aAAc,IAAM,MAC5FC,SAAS7G,IAAI,EAAG,IAAK,GAC5BuE,EAAOuC,OAAO,EAAG,EAAG,GACpBvC,EAAO6B,OAAS,WACZ7B,EAAOwC,OAAS7D,EAAUyD,YAAczD,EAAU0D,aAClDrC,EAAOyC,yBACPzC,EAAO0C,IAAInC,EAAO,MAEtBP,EAAO0C,IAAM,SAAUC,EAAQC,EAAQC,GACnCD,EAASA,GAAU,IACnBC,EAAKA,GAAM,IAAId,MAAMe,QAAQ,EAAG,GAAI,GACpC,IAAIC,EAAM,IAAIhB,MAAMiB,KAChBC,EAAU,IAAIlB,MAAMe,QACpBI,EAAS,IAAInB,MAAMe,QACvBC,EAAII,cAAcR,GAClBI,EAAIK,UAAUF,GACdH,EAAIM,aAAarD,EAAOsD,oBACxBP,EAAIQ,QAAQN,GACZ,IAAIT,EAASS,EAAQpI,EAAIoI,EAAQjI,EAC7BwI,EAAQxD,EAAOwC,OAASA,EAAUS,EAAQjI,EAAIiI,EAAQpI,EACtDmF,EAAOwC,OAASA,IAChBgB,GAAQxD,EAAOwC,QAGnB,IAAIvH,GADJuI,GAAQZ,GACO,EAAI9H,KAAK2I,IAAIzD,EAAO0D,IAAM,EAAInE,GAC7CS,EAAOsC,SAASqB,YAAYC,eAAe3I,GAC3C+E,EAAO6C,GAAKA,EACZ,IAAIgB,EAAW7D,EAAOsC,SAASwB,WAAWZ,GAEtC/C,GACAA,EAAM4D,OAASb,EACf/C,EAAM6D,YAAcH,EAAWL,EAC/BrD,EAAM8D,UAGNjE,EAAOkE,IAAML,EAAWL,EAE5BxD,EAAOyC,0BAEXjE,OAAOwB,OAASA,EAChBC,EAAMgC,IAAIjC,GAjaVA,EAkaOA,GA3ZPI,EAAQ,IAAI2B,MAAMoC,UAAU,SAAU,EAAG,IAAM,EAAG,EAAG,KAE/C7B,SAAS7G,IAAI,GAAI,IAAK,IAC5B2E,EAAMgE,YAAa,EACnBhE,EAAMiE,OAAOC,QAAQC,MAAQvF,EAC7BoB,EAAMiE,OAAOC,QAAQE,OAASxF,EAC9BoB,EAAMiE,OAAOrE,OAAOyE,KAAO,GAC3BrE,EAAMiE,OAAOrE,OAAOkE,IAAM,IAE1B9D,EAAMiE,OAAOK,OAAS,OACtBzE,EAAMgC,IAAI7B,GAGVG,EAAQ,IAAIwB,MAAM4C,MAGlBtE,EAAW,IAAI0B,MAAM6C,cAAc,IAAK,IAAK,GAAI,IACjDtE,EAAW,IAAIyB,MAAM8C,eAAe,CAChCC,QAAS,IACTC,KAAMhD,MAAMiD,cAUhBxE,EAAQ,IAAIuB,MAAMkD,KAAK5E,EAAUC,IAC3B4E,SAASzJ,KAAKX,KAAK0E,GAAK,EAAG,EAAG,GACpCgB,EAAM8B,SAAS7G,IAAI,EAAG,GAAI,GAC1B+E,EAAM2E,eAAgB,EACtBlF,EAAMgC,IAAIzB,IAGVO,GAAS,IAAIgB,MAAMqD,eAAgBC,KAAK,sBACjCC,QAAUvD,MAAMwD,iCACvBxE,EAAOyE,UAAYzD,MAAM0D,aACzB1E,EAAO2E,UAAY3D,MAAM4D,yBAEzBtF,EAAW,IAAI0B,MAAM6D,eAAe,EAAG,GAAI,IAE3CtF,EAAW,IAAIyB,MAAM8D,qBAAqB,CACtCC,MAAO,QACPC,UAAW,GACXC,UAAW,IACXjF,OAAQA,EACRkF,gBAAiB,KAErBxF,EAAY,IAAIsB,MAAMkD,KAAK5E,EAAUC,IAC3BgC,SAAS7G,IAAI,EAAG,EAAG,GAC7BgF,EAAU0E,eAAgB,EAC1B1E,EAAU2D,YAAa,EACvB7D,EAAM0B,IAAIxB,GACVc,EAAW2E,KAAKzF,GAGhBJ,EAAW,IAAI0B,MAAMoE,YAAY,EAAG,EAAG,GACvC7F,EAAW,IAAIyB,MAAM8D,qBAAqB,CACtCC,MAAO,SACPC,UAAW,GACXC,UAAW,GACXlB,QAAS,EACTsB,aAAa,KAYjB1F,EAAU,IAAIqB,MAAMkD,KAAK5E,EAAUC,IAE3BgC,SAAS7G,IAAI,GAAI,EAAG,GAC5BiF,EAAQyE,eAAgB,EACxBzE,EAAQ0D,YAAa,EAEjBrF,IACAsB,EAAW,IAAI0B,MAAMsE,aAAa,EAAG,IAAK,GAAI,GAC9C/F,EAAW,IAAIyB,MAAM8D,qBAAqB,CACtCC,MAAO,QACPC,UAAW,GACXC,UAAW,GACXlB,QAAS,EACTsB,aAAa,KAEjBzF,EAAO,IAAIoB,MAAMkD,KAAK5E,EAAUC,IAC3B4E,SAASzJ,KAAKX,KAAK0E,GAAK,EAAG,EAAG,GACnCmB,EAAKwE,eAAgB,EACrBxE,EAAKyD,YAAa,EAClB1D,EAAQuB,IAAItB,IAGhBJ,EAAM0B,IAAIvB,GACVc,EAAU0E,KAAKxF,GAGfL,EAAW,IAAI0B,MAAMsE,aAAa,KAAM,GAAI,GAAI,GAEhD/F,EAAW,IAAIyB,MAAM8D,qBAAqB,CACtCC,MAAO,QACPQ,IAAKrF,EACLD,QAASA,EACTuF,UAAW,IAGXR,UAAW,EACX7E,aAAcA,EAEd8E,UAAW,EACX7E,aAAcA,KAMlBN,EAAO,IAAIkB,MAAMkD,KAAK5E,EAAUC,IAC3BgC,SAAS7G,IAAI,EAAG,GAAK,GAC1BoF,EAAKqE,SAASzJ,KAAKX,KAAK0E,GAAK,EAAG,EAAG,GACnCqB,EAAKsE,eAAgB,EACrBtE,EAAKuD,YAAa,EAClBnD,GAAa,IAAIc,MAAMqD,eAAgBC,KAAK,gBAC5ChF,EAAW,IAAI0B,MAAMsE,aAAa,IAAK,GAAI,GAAI,GAE/C/F,EAAW,IAAIyB,MAAM8D,qBAAqB,CACtCC,MAAO,SACPQ,IAAKrF,EACL8E,UAAW,GACXC,UAAW,MAEflF,EAAQ,IAAIiB,MAAMkD,KAAK5E,EAAUC,IAC3BgC,SAAS7G,IAAI,EAAG,EAAG,GACzBqF,EAAMqE,eAAgB,EACtBrE,EAAMsD,YAAa,EACnBvD,EAAKoB,IAAInB,GACTP,EAAM0B,IAAIpB,GAGVI,GAAa,IAAIc,MAAMqD,eAAgBC,KAAK,iBAC5ChF,EAAW,IAAI0B,MAAM6C,cAAc,GAAI,GAAI,GAAI,IAC/CtE,EAAW,IAAIyB,MAAM8D,qBAAqB,CACtCC,MAAO,SACPQ,IAAKrF,EACL8E,UAAW,GACXC,UAAW,GACXlB,QAAS,EACTsB,aAAa,KAEjBxF,EAAQ,IAAImB,MAAMkD,KAAK5E,EAAUC,IAC3B4E,SAASzJ,KAAKX,KAAK0E,GAAK,EAAG,EAAG,GACpCoB,EAAM0B,SAAS7G,KAAK,GAAI,EAAG,GAC3BmF,EAAMuE,eAAgB,EACtBvE,EAAMwD,YAAa,EACnB7D,EAAM0B,IAAIrB,GACVX,EAAMgC,IAAI1B,IAGVL,EAAW,IAAI6B,MAAMyE,cAAc,CAC/BC,WAAW,EACXC,OAAO,EACPC,wBAAwB,KAEnBC,cAAcpI,OAAOqI,kBAC9B3G,EAAS4G,QAAQnI,EAAUyD,YAAazD,EAAU0D,cAClDnC,EAAS6G,UAAUC,SAAU,EAC7B9G,EAAS+G,YAAa,EACtB/G,EAASgH,aAAc,EAGvBhH,EAAS6G,UAAUlP,KAAOkK,MAAMoF,kBAQhCzM,EAAO,IAAIqH,MAAMqF,aAAa5F,EAAWxB,EAAQE,EAASmH,aACrDzF,iBAAiB,YAAa,SAAU0F,GACzCvH,GAAW,EACPI,IACAA,EAAM6G,SAAU,GAEpB5M,EAAK3B,QACL2B,EAAKK,SAAShC,UAElBiC,EAAKkH,iBAAiB,OAAQ,SAAU0F,GACpC,IAAIC,EAAI7G,EAAQ4B,SAASkF,QACrBC,EAAIhH,EAAU6B,SAASkF,QACvB7M,EAAI4M,EAAEG,IAAID,GACdrN,EAAKK,SAASC,KAAKC,GACA,IAAfP,EAAKoB,OACLmM,UAAUC,GAAGxN,EAAM,GAAK,CACpBoB,MAAO,EACPqM,KAAMC,OAAOC,QACbC,SAAU,WACN5N,EAAKwB,SAASxB,EAAKoB,YAKnCd,EAAKkH,iBAAiB,UAAW,SAAU0F,GACvCvH,GAAW,EACPI,IACAA,EAAM6G,SAAU,GAED,IAAf5M,EAAKoB,QACLmM,UAAUC,GAAGxN,EAAM,GAAK,CACpBoB,MAAO,EACPqM,KAAMC,OAAOC,QACbC,SAAU,WACN5N,EAAKwB,SAASxB,EAAKoB,QAEvByM,WAAY,WACR7N,EAAKK,SAASF,OACdH,EAAKG,UAIboN,UAAUC,GAAGlH,EAAQwE,SAAU,EAAG,CAC9BlK,EAAGF,KAAKQ,MAAMoF,EAAQwE,SAASlK,EAAIF,KAAK0E,GAAK,GAAK1E,KAAK0E,GAAK,EAC5DqI,KAAMC,OAAOC,UAGjBJ,UAAUC,GAAGlH,EAAQ4B,SAAU,EAAG,CAC9BzH,EAAG,GACHI,EAAG,EACH4M,KAAMK,QAAQH,UAGlBJ,UAAUC,GAAGxH,EAAMkC,SAAU,EAAG,CAC5BzH,EAAG,GACHI,GAAI,GACJ4M,KAAMK,QAAQH,aAK1BI,WAAW,WACPxJ,EAAUmB,YAAYI,EAASmH,YAC/BxF,KACD,KAGP,SAASF,EAAQhF,GACb8C,EAAM2I,QACN,IACIC,EAAU,SAAY,IA8M9B,WACI,IAAIC,EAAMlH,EAAYkH,MACtB,KAAsB,EAAfhH,EAAMjG,QAAciG,EAAM,IAAMgH,EAAM,KACzChH,EAAMiH,QAIV,OAFAjH,EAAM4E,KAAKoC,GACLhH,EAAMjG,OArNFmN,IAAY,IAEtB,GAAI7H,EAAM,CACN,IAAI8H,EAAI3N,KAAKC,IAAID,KAAK2I,IAAW,KAAP9G,KAAkB,EAAIvC,EAAKoB,OACrDmF,EAAKL,SAASwE,QAAU2D,EACxB9H,EAAK+H,MAAMjN,IAAI,EAAQ,GAAJgN,EAAS,EAAQ,GAAJA,EAAS,EAAQ,GAAJA,GAEjDhI,EAAUyE,SAASlK,GAAKqN,EAAUjO,EAAKoB,MACvCqF,EAAKqE,SAASjK,GAAKoN,EAAUjO,EAAKoB,MAClCkF,EAAQwE,SAASlK,GAAKqN,EAAUjO,EAAKoB,MACrCoF,EAAM0B,SAASzH,GAAK,GAAK,GAAKT,EAAKoB,MAC/BuE,IACAK,EAAMkC,SAASzH,KAA4B,EAAtB6F,EAAQ4B,SAASzH,EAASuF,EAAMkC,SAASzH,GAAK,GACnEuF,EAAMkC,SAASrH,KAA4B,EAAtByF,EAAQ4B,SAASrH,EAASmF,EAAMkC,SAASrH,GAAK,IAGvEiF,EAASyI,OAAO1I,EAAOD,GACvBP,EAAMmJ,MACNC,sBAAsBlH,GA+B1B,SAASE,IACL7B,EAAO6B,SACP3B,EAAS4G,QAAQnI,EAAUyD,YAAazD,EAAU0D,cAClDnC,EAAS4I,aAGb,SAASrH,EAAgB5J,EAAM2L,GAE3B,IAAIuF,EADJvF,EAAOA,GAAQ,KAEXwF,EAAIxF,EACJyF,EAASrK,SAASsK,cAAc,UACpCD,EAAO1E,MAAQwE,EACfE,EAAOzE,OAASwE,EAChB,IAKI5N,EALA+N,EAAMF,EAAOG,WAAW,MACxBvO,EAAIkO,EAAI,EACR/N,EAAIgO,EAAI,EACRK,EAAO7F,EAAO,EAAI,GAClBoE,EAAKpE,EAAO,EAAI,IAGpB,SAAS8F,EAAO5E,EAAQ6E,EAAMC,EAAQC,GAClCN,EAAIO,YACJP,EAAIQ,IAAI9O,EAAGG,EAAG0J,EAAQ,EAAG,EAAI5J,KAAK0E,IAAI,GAClC+J,IACAJ,EAAIS,UAAYL,EAChBJ,EAAII,QAEJC,IACAL,EAAIM,UAAYA,EAChBN,EAAIU,YAAcL,EAClBL,EAAIK,UAERL,EAAIW,YAQR,GANIjS,IAASqH,EAAaC,UACtBgK,EAAIS,UAAY,UAChBT,EAAIY,KAAK,EAAG,EAAGhB,EAAGC,GAClBG,EAAII,OACJD,EAAOD,EAAM,YAEbxR,IAASqH,EAAaG,MAItB,IAHA8J,EAAIS,UAAY,UAChBT,EAAIY,KAAK,EAAG,EAAGhB,EAAGC,GAClBG,EAAII,OACCnO,EAAIiO,EAAMjO,EAAIwM,EAAIxM,GAAK,GAAqB,GAAhBN,KAAKyC,SAAe,CACjD,IAAIyM,EAAI5O,EAAoB,GAAhBN,KAAKyC,SACb0M,GAAK,GAAqB,GAAhBnP,KAAKyC,UAAiB,EACpC0M,EAA8B,EAA1BnP,KAAKK,IAAI8O,EAAGrC,EAAKoC,EAAI,GACzBV,EAAOU,EAAG,KAAM,uBAAyC,GAAhBlP,KAAKyC,SAAiB,IAAK0M,GAG5E,GAAIpS,IAASqH,EAAaE,KAItB,IAHA+J,EAAIS,UAAY,UAChBT,EAAIY,KAAK,EAAG,EAAGhB,EAAGC,GAClBG,EAAII,OACCnO,EAAIiO,EAAMjO,EAAIwM,EAAIxM,GAAK,EACxBkO,EAAOlO,EAAoB,GAAhBN,KAAKyC,SAAgB,KAAM,uBAAyC,GAAhBzC,KAAKyC,SAAiB,IAAK,IAIlG,IAAI2M,EAAU,IAAInI,MAAMoI,cAAclB,EAAQlH,MAAMqI,UAAWrI,MAAMsI,oBAAqBtI,MAAMsI,oBAAqBtI,MAAM0D,aAAc1D,MAAM4D,yBAA0B5D,MAAMuI,UAAWvI,MAAMwI,iBAAkB,GAMlN,OALIzL,IACAmK,EAAOpJ,aAAa,QAAS,OAAU,IAAMZ,EAAK,OAClDL,SAAS4L,KAAK1K,YAAYmJ,IAE9BhK,IACOiL,GArcf","file":"app.min.js","sourcesContent":["/* global window, document, console, TweenLite, Tone */\n\n(function () {\n    'use strict';\n\n    var Song = function () {\n\n        var volume = new Tone.Volume(-100);\n\n        function Song() {}\n\n        Song.getMp3 = getMp3;\n        Song.getSong = getSong;\n        Song.getSynth = getSynth;\n\n        function getMp3() {\n\n            // FILTER\n            var filter = new Tone.Filter({\n                type: 'lowpass',\n                frequency: 350,\n                rolloff: -12,\n                Q: 1,\n                gain: 0\n            }).toMaster();\n\n            var player = new Tone.Player({\n                url: \"audio/The-Blinding-Shiver-128.[mp3|ogg]\",\n                loop: true,\n                playbackRate: 0.1,\n            }).toMaster().sync().start('0');\n\n            Tone.Transport.timeSignature = 4;\n            Tone.Transport.bpm.value = 98;\n            Tone.Transport.loop = true;\n            Tone.Transport.loopStart = '0';\n            Tone.Transport.loopEnd = '98:5';\n\n            // SYNTH\n            var synth = new Tone.DuoSynth({\n                vibratoAmount: 0.5,\n                vibratoRate: 5,\n                portamento: 0.1,\n                harmonicity: 1.005,\n                volume: 1,\n                voice0: {\n                    volume: -2,\n                    oscillator: {\n                        type: 'sawtooth'\n                    },\n                    filter: {\n                        Q: 1,\n                        type: 'lowpass',\n                        rolloff: -24\n                    },\n                    envelope: {\n                        attack: 0.01,\n                        decay: 0.25,\n                        sustain: 0.4,\n                        release: 1.2\n                    },\n                    filterEnvelope: {\n                        attack: 0.001,\n                        decay: 0.05,\n                        sustain: 0.3,\n                        release: 2,\n                        baseFrequency: 100,\n                        octaves: 4\n                    }\n                },\n                voice1: {\n                    volume: -10,\n                    oscillator: {\n                        type: 'sawtooth'\n                    },\n                    filter: {\n                        Q: 2,\n                        type: 'bandpass',\n                        rolloff: -12\n                    },\n                    envelope: {\n                        attack: 0.25,\n                        decay: 4,\n                        sustain: 0.1,\n                        release: 0.8\n                    },\n                    filterEnvelope: {\n                        attack: 0.05,\n                        decay: 0.05,\n                        sustain: 0.7,\n                        release: 2,\n                        baseFrequency: 5000,\n                        octaves: -1.5\n                    }\n                }\n            }).toMaster();\n            synth.notes = ['C2', 'E2', 'G2', 'A2', 'C3', 'D3', 'E3', 'G3', 'A3', 'B3', 'C4', 'D4', 'E4', 'G4', 'A4', 'B4', 'C5'];\n            synth.note = synth.notes[0];\n\n            var song = {\n                effects: {\n                    filter: filter,\n                },\n                instruments: {\n                    player: player,\n                    synth: synth,\n                },\n                start: function () {\n                    Tone.Transport.start(\"+0.1\");\n                },\n                stop: function () {\n                    Tone.Transport.pause();\n                },\n                theremin: {\n                    drag: function (d) {\n                        d = d.divideScalar(10);\n                        var x = Math.abs(d.x);\n                        var y = Math.abs(d.z);\n                        x = Math.max(0, Math.min(1, x));\n                        y = Math.max(0, Math.min(1, y));\n                        var i = Math.max(0, Math.min(synth.notes.length - 1, Math.round(y * synth.notes.length - 1)));\n                        var note = synth.notes[synth.notes.length - 1 - i];\n                        if (synth.note !== note) {\n                            synth.note = note;\n                            synth.setNote(note);\n                        }\n                        synth.vibratoAmount.value = x * 10;\n                        if (song.speed === 1) {\n                            filter.set('detune', -10000 + (20000 * x));\n                        }\n                        // console.log(song.speed);\n                    },\n                    start: function () {\n                        synth.triggerAttack(synth.note);\n                    },\n                    stop: function () {\n                        synth.triggerRelease();\n                    },\n                },\n                speed: 0,\n                setSpeed: function (x) {\n                    x = Math.max(0, Math.min(1, x));\n                    player.set('playbackRate', 0.1 + 0.99 * x);\n                    filter.set('detune', -10000 + (10000 * x));\n                },\n            };\n            return song;\n\n        }\n\n        function getSong() {\n\n            // FILTER\n            var filter = new Tone.Filter({\n                type: 'lowpass',\n                frequency: 350,\n                rolloff: -12,\n                Q: 1,\n                gain: 0\n            }).toMaster();\n\n            // COMPRESSOR\n            var compressor = new Tone.Compressor({\n                threshold: -30,\n                ratio: 6,\n                attack: 0.3,\n                release: 0.1\n            }).toMaster();\n\n            // DISTORTION\n            var distortion = new Tone.Distortion({\n                distortion: 0.4,\n                wet: 0.4\n            });\n\n            // HATS\n            var hats = new Tone.Player({\n                url: 'audio/505/hh.[mp3|ogg]',\n                volume: -10,\n                retrigger: true,\n                fadeOut: 0.05\n            }).chain(distortion, compressor);\n            hats.loop = new Tone.Loop({\n                callback: function (time) {\n                    hats.start(time).stop(time + 0.05);\n                },\n                interval: '16n',\n                probability: 0.8\n            }).start('1m');\n\n            // SNARE\n            var snare = new Tone.Player({\n                url: 'audio/505/snare.[mp3|ogg]',\n                retrigger: true,\n                fadeOut: 0.1\n            }).chain(distortion, compressor);\n            snare.part = new Tone.Sequence(function (time, velocity) {\n                snare.volume.value = Tone.gainToDb(velocity);\n                snare.start(time).stop(time + 0.1);\n            }, [null, 1, null, [1, 0.3]]).start(0);\n\n            // KICK\n            var kick = new Tone.MembraneSynth({\n                pitchDecay: 0.01,\n                octaves: 6,\n                oscillator: {\n                    type: 'square4'\n                },\n                envelope: {\n                    attack: 0.001,\n                    decay: 0.2,\n                    sustain: 0\n                }\n            }).connect(compressor);\n            kick.part = new Tone.Sequence(function (time, probability) {\n                if (Math.random() < probability) {\n                    kick.triggerAttack('C1', time);\n                }\n            }, [1, [1, [null, 0.3]], 1, [1, [null, 0.5]], 1, 1, 1, [1, [null, 0.8]]], '2n').start(0);\n\n            // BASS\n            var bass = new Tone.FMSynth({\n                harmonicity: 1,\n                modulationIndex: 3.5,\n                carrier: {\n                    oscillator: {\n                        type: 'custom',\n                        partials: [0, 1, 0, 2]\n                    },\n                    envelope: {\n                        attack: 0.08,\n                        decay: 0.3,\n                        sustain: 0,\n                    },\n                },\n                modulator: {\n                    oscillator: {\n                        type: 'square'\n                    },\n                    envelope: {\n                        attack: 0.1,\n                        decay: 0.2,\n                        sustain: 0.3,\n                        release: 0.01\n                    },\n                }\n            }).toMaster();\n            bass.part = new Tone.Part(function (time, event) {\n                if (Math.random() < event.prob) {\n                    bass.triggerAttackRelease(event.note, event.dur, time);\n                }\n            }, [{\n                time: '0:0',\n                note: 'C2',\n                dur: '4n.',\n                prob: 1\n            }, {\n                time: '0:2',\n                note: 'C2',\n                dur: '8n',\n                prob: 0.6\n            }, {\n                time: '0:2.6666',\n                note: 'C2',\n                dur: '8n',\n                prob: 0.4\n            }, {\n                time: '0:3.33333',\n                note: 'C2',\n                dur: '8n',\n                prob: 0.9\n            }, {\n                time: '1:0',\n                note: 'C2',\n                dur: '4n.',\n                prob: 1\n            }, {\n                time: '1:2',\n                note: 'C2',\n                dur: '8n',\n                prob: 0.6\n            }, {\n                time: '1:2.6666',\n                note: 'C2',\n                dur: '8n',\n                prob: 0.4\n            }, {\n                time: '1:3.33333',\n                note: 'E2',\n                dur: '8n',\n                prob: 0.9\n            }, {\n                time: '2:0',\n                note: 'F2',\n                dur: '4n.',\n                prob: 1\n            }, {\n                time: '2:2',\n                note: 'F2',\n                dur: '8n',\n                prob: 0.6\n            }, {\n                time: '2:2.6666',\n                note: 'F2',\n                dur: '8n',\n                prob: 0.4\n            }, {\n                time: '2:3.33333',\n                note: 'F2',\n                dur: '8n',\n                prob: 0.9\n            }, {\n                time: '3:0',\n                note: 'F2',\n                dur: '4n.',\n                prob: 1\n            }, {\n                time: '3:2',\n                note: 'F2',\n                dur: '8n',\n                prob: 0.6\n            }, {\n                time: '3:2.6666',\n                note: 'F2',\n                dur: '8n',\n                prob: 0.4\n            }, {\n                time: '3:3.33333',\n                note: 'B1',\n                dur: '8n',\n                prob: 0.9\n            }]).start(0);\n            bass.part.loop = true;\n            bass.part.loopEnd = '4m';\n\n            // SYNTH\n            var synth = new Tone.DuoSynth({\n                vibratoAmount: 0.5,\n                vibratoRate: 5,\n                portamento: 0.1,\n                harmonicity: 1.005,\n                volume: 5,\n                voice0: {\n                    volume: -2,\n                    oscillator: {\n                        type: 'sawtooth'\n                    },\n                    filter: {\n                        Q: 1,\n                        type: 'lowpass',\n                        rolloff: -24\n                    },\n                    envelope: {\n                        attack: 0.01,\n                        decay: 0.25,\n                        sustain: 0.4,\n                        release: 1.2\n                    },\n                    filterEnvelope: {\n                        attack: 0.001,\n                        decay: 0.05,\n                        sustain: 0.3,\n                        release: 2,\n                        baseFrequency: 100,\n                        octaves: 4\n                    }\n                },\n                voice1: {\n                    volume: -10,\n                    oscillator: {\n                        type: 'sawtooth'\n                    },\n                    filter: {\n                        Q: 2,\n                        type: 'bandpass',\n                        rolloff: -12\n                    },\n                    envelope: {\n                        attack: 0.25,\n                        decay: 4,\n                        sustain: 0.1,\n                        release: 0.8\n                    },\n                    filterEnvelope: {\n                        attack: 0.05,\n                        decay: 0.05,\n                        sustain: 0.7,\n                        release: 2,\n                        baseFrequency: 5000,\n                        octaves: -1.5\n                    }\n                }\n            }).toMaster();\n            synth.notes = ['C2', 'E2', 'G2', 'A2', 'C3', 'D3', 'E3', 'G3', 'A3', 'B3', 'C4', 'D4', 'E4', 'G4', 'A4', 'B4', 'C5'];\n            synth.note = synth.notes[0];\n\n            Tone.Transport.bpm.value = 1;\n\n            var song = {\n                effects: {\n                    filter: filter,\n                    compressor: compressor,\n                    distortion: distortion,\n                },\n                instruments: {\n                    hats: hats,\n                    snare: snare,\n                    kick: kick,\n                    bass: bass,\n                    synth: synth,\n                },\n                start: function () {\n                    Tone.Transport.start('+0.1');\n                },\n                stop: function () {\n                    Tone.Transport.stop();\n                },\n                theremin: {\n                    drag: function (d) {\n                        d = d.divideScalar(10);\n                        var x = Math.abs(d.x);\n                        var y = Math.abs(d.z);\n                        x = Math.max(0, Math.min(1, x));\n                        y = Math.max(0, Math.min(1, y));\n                        var i = Math.max(0, Math.min(synth.notes.length - 1, Math.round(y * synth.notes.length - 1)));\n                        var note = synth.notes[synth.notes.length - 1 - i];\n                        if (synth.note !== note) {\n                            synth.note = note;\n                            synth.setNote(note);\n                        }\n                        synth.vibratoAmount.value = x * 10;\n                    },\n                    start: function () {\n                        synth.triggerAttack(synth.note);\n                    },\n                    stop: function () {\n                        synth.triggerRelease();\n                    },\n                },\n                speed: 0,\n                setSpeed: function (x) {\n                    x = Math.max(0, Math.min(1, x));\n                    Tone.Transport.bpm.value = 1 + Math.round(x * 124);\n                    filter.set('detune', -10000 + (10000 * x));\n                },\n            };\n            return song;\n        }\n\n        function getSynth(volume) {\n            var synth = new Tone.Synth({\n                oscillator: {\n                    type: 'amtriangle',\n                    harmonicity: 0.5,\n                    modulationType: 'sine'\n                },\n                envelope: {\n                    attackCurve: 'exponential',\n                    attack: 0.05,\n                    decay: 0.2,\n                    sustain: 0.2,\n                    release: 1.5,\n                },\n                portamento: 0.05\n            });\n\n            /*\n            var delay = new Tone.PingPongDelay({\n                delayTime: '2t',\n                feedback: 0.4,\n                wet: 0.25\n            });\n            delay.chain(volume, Tone.Master);\n            synth.connect(delay);\n            */\n\n            synth.chain(volume, Tone.Master);\n            //play a middle 'C' for the duration of an 8th note\n            // synth.triggerAttackRelease('C4', '8n');\n            return synth;\n        }\n\n        return Song;\n\n    }();\n\n    window.Song = Song;\n\n}());\n/* global window, document, console, Tone, TweenLite, stats */\n\n(function () {\n    'use strict';\n\n    if (!Detector.webgl) {\n        Detector.addGetWebGLMessage();\n        return;\n    }\n\n    var container = document.querySelector('.section-scene');\n\n    var song = Song.getMp3();\n    // var song = Song.getSong();\n    var synth = null;\n    // var volume = new Tone.Volume(-100);\n    // var synth = Song.getSynth(volume);\n\n    var DEBUG = false;\n    var SHOW_RING = true;\n    var USE_PCSS_SHADOWS = false;\n    var SHADOW_SIZE = 1024; // 2048;\n    var T = 0;\n    var textureTypes = {\n        DIFFUSE: 0,\n        BUMP: 1,\n        LIGHT: 2,\n        ALPHA: 3,\n    };\n\n    var RAD = Math.PI / 180;\n\n    function rad(degree) {\n        return degree * RAD;\n    }\n\n    var stats = new Stats();\n    stats.showPanel(0); // 0: fps, 1: ms, 2: mb, 3+: custom\n    var statsdom = stats.dom;\n    statsdom.setAttribute('class', 'stats');\n    // statsdom.style.cssText = 'position:fixed;top:0;right:0;cursor:pointer;opacity:0.9;z-index:10000';\n    if (DEBUG) {\n        container.appendChild(stats.dom);\n    }\n\n    var performance = (window.performance || Date);\n    var ticks = [],\n        fps, dragging;\n\n    var connectors = [];\n    var hittables = [];\n\n    var camera, perspectivecamera, orthocamera, scene, renderer, orbit, drag;\n    var light;\n    var geometry, material, mesh;\n    var group, plane, connector, emitter, ring, cover, disc, label;\n\n    var envMap, bumpMap, diffuseMap, roughnessMap, metalnessMap;\n\n    bumpMap = getDiscTextures(textureTypes.BUMP);\n    roughnessMap = getDiscTextures(textureTypes.LIGHT, 512);\n    diffuseMap = getDiscTextures(textureTypes.DIFFUSE, 512);\n    metalnessMap = getDiscTextures(textureTypes.LIGHT, 512);\n\n    // soft shadow maps         \n    if (USE_PCSS_SHADOWS) {\n        getSoftShadowMaps(function () {\n            init();\n            animate();\n        });\n    } else {\n        init();\n        animate();\n    }\n\n    function init() {\n        // scene\n        scene = new THREE.Scene();\n        // scene.fog = new THREE.Fog(0x999999, 5, 100);\n        scene.add(new THREE.AmbientLight(0x444444));\n\n        // camera\n        camera = perspectivecamera = getCamera();\n\n        // camera\n        // camera = orthocamera = getOrthoCamera();\n\n        // light\n        // light = new THREE.PointLight(0xfefefe, 2, 100, 2);\n        light = new THREE.SpotLight(0xfefefe, 1, 1000, 1, 1, 0.1);\n        // light = new THREE.DirectionalLight(0xdfebff, 1.75);\n        light.position.set(35, 50, -35);\n        light.castShadow = true;\n        light.shadow.mapSize.width = SHADOW_SIZE;\n        light.shadow.mapSize.height = SHADOW_SIZE;\n        light.shadow.camera.near = 0.1;\n        light.shadow.camera.far = 500;\n        // light.shadow.bias = 0.0001;\n        light.shadow.radius = 1.0001;\n        scene.add(light);\n\n        // group\n        group = new THREE.Group();\n\n        // plane\n        geometry = new THREE.PlaneGeometry(500, 500, 25, 25);\n        material = new THREE.ShadowMaterial({\n            opacity: 0.25,\n            side: THREE.DoubleSide\n        });\n        /*\n        material = new THREE.MeshStandardMaterial({\n            color: 0xeeeeee,\n            roughtness: 1,\n            metalness: 0,\n            side: THREE.DoubleSide\n        });\n        */\n        plane = new THREE.Mesh(geometry, material);\n        plane.rotation.set(-Math.PI / 2, 0, 0);\n        plane.position.set(0, 0, -1);\n        plane.receiveShadow = true;\n        scene.add(plane);\n\n        // connector\n        envMap = new THREE.TextureLoader().load('img/envmap-sm.jpg');\n        envMap.mapping = THREE.EquirectangularReflectionMapping;\n        envMap.magFilter = THREE.LinearFilter;\n        envMap.minFilter = THREE.LinearMipMapLinearFilter;\n        // geometry = new THREE.BoxGeometry(10, 10, 10);\n        geometry = new THREE.SphereGeometry(1, 64, 64);\n        // material = new THREE.MeshNormalMaterial();\n        material = new THREE.MeshStandardMaterial({\n            color: 0x666666,\n            roughness: 0.2,\n            metalness: 0.95,\n            envMap: envMap,\n            envMapIntensity: 1,\n        });\n        connector = new THREE.Mesh(geometry, material);\n        connector.position.set(0, 1, 0);\n        connector.receiveShadow = false;\n        connector.castShadow = true;\n        group.add(connector);\n        connectors.push(connector);\n\n        // emitter\n        geometry = new THREE.BoxGeometry(3, 3, 3);\n        material = new THREE.MeshStandardMaterial({\n            color: 0xffffff,\n            roughness: 0.6,\n            metalness: 0.1,\n            opacity: 1,\n            transparent: false,\n        });\n        /*\n        geometry = new THREE.SphereGeometry(2, 64, 64);\n        material = new THREE.MeshStandardMaterial({\n            color: 0xffffff,\n            roughness: 0.3,\n            metalness: 0.5,\n            envMap: envMap,\n            envMapIntensity: 1,\n        });\n        */\n        emitter = new THREE.Mesh(geometry, material);\n        // emitter.position.set(-35, 1.5, 35);\n        emitter.position.set(55, 4, 0);\n        emitter.receiveShadow = false;\n        emitter.castShadow = true;\n        // ring\n        if (SHOW_RING) {\n            geometry = new THREE.RingGeometry(3, 3.3, 32, 1);\n            material = new THREE.MeshStandardMaterial({\n                color: 0x3f3b38,\n                roughness: 0.9,\n                metalness: 0.1,\n                opacity: 0.0,\n                transparent: true,\n            });\n            ring = new THREE.Mesh(geometry, material);\n            ring.rotation.set(-Math.PI / 2, 0, 0);\n            ring.receiveShadow = false;\n            ring.castShadow = false;\n            emitter.add(ring);\n        }\n        //\n        group.add(emitter);\n        hittables.push(emitter);\n\n        // disc\n        geometry = new THREE.RingGeometry(12.1, 45, 64, 4);\n        // geometry = new THREE.CircleGeometry(45, 128);\n        material = new THREE.MeshStandardMaterial({\n            color: 0x2f2d2b,\n            map: diffuseMap,\n            bumpMap: bumpMap,\n            bumpScale: 0.02,\n            // envMap: envMap,\n            // envMapIntensity: 1,\n            roughness: 1.0, //0.02,\n            roughnessMap: roughnessMap,\n            // roughnessMap: metalnessMap,\n            metalness: 1.0,\n            metalnessMap: metalnessMap,\n            // opacity: 1,\n            // transparent: false,\n            // side: THREE.DoubleSide\n        });\n        // material = new THREE.MeshNormalMaterial({ side: THREE.DoubleSide });\n        disc = new THREE.Mesh(geometry, material);\n        disc.position.set(0, 0.1, 0);\n        disc.rotation.set(-Math.PI / 2, 0, 0);\n        disc.receiveShadow = true;\n        disc.castShadow = true;\n        diffuseMap = new THREE.TextureLoader().load('img/disc.jpg');\n        geometry = new THREE.RingGeometry(1.3, 12, 64, 4);\n        // geometry = new THREE.CircleGeometry(12, 128);\n        material = new THREE.MeshStandardMaterial({\n            color: 0xffffff,\n            map: diffuseMap,\n            roughness: 0.6,\n            metalness: 0.4,\n        });\n        label = new THREE.Mesh(geometry, material);\n        label.position.set(0, 0, 0);\n        label.receiveShadow = true;\n        label.castShadow = true;\n        disc.add(label);\n        group.add(disc);\n\n        // cover\n        diffuseMap = new THREE.TextureLoader().load('img/cover.jpg');\n        geometry = new THREE.PlaneGeometry(90, 90, 32, 32);\n        material = new THREE.MeshStandardMaterial({\n            color: 0xefebe8,\n            map: diffuseMap,\n            roughness: 0.6,\n            metalness: 0.1,\n            opacity: 1,\n            transparent: false,\n        });\n        cover = new THREE.Mesh(geometry, material);\n        cover.rotation.set(-Math.PI / 2, 0, 0);\n        cover.position.set(-25, 4, 0);\n        cover.receiveShadow = true;\n        cover.castShadow = true;\n        group.add(cover);\n        scene.add(group);\n\n        // renderer\n        renderer = new THREE.WebGLRenderer({\n            antialias: true,\n            alpha: true,\n            logarithmicDepthBuffer: true,\n        });\n        renderer.setPixelRatio(window.devicePixelRatio);\n        renderer.setSize(container.offsetWidth, container.offsetHeight);\n        renderer.shadowMap.enabled = true;\n        renderer.gammaInput = true;\n        renderer.gammaOutput = true;\n        // renderer.shadowMap.type = THREE.BasicShadowMap; // 0\n        // renderer.shadowMap.type = THREE.PCFShadowMap; // 1\n        renderer.shadowMap.type = THREE.PCFSoftShadowMap; // 2  \n\n        // controls\n        /*\n        orbit = new THREE.OrbitControls(camera);\n        orbit.update();\n        */\n\n        drag = new THREE.DragControls(hittables, camera, renderer.domElement);\n        drag.addEventListener('dragstart', function (e) {\n            dragging = true;\n            if (orbit) {\n                orbit.enabled = false;\n            }\n            song.start();\n            song.theremin.start();\n        });\n        drag.addEventListener('drag', function (e) {\n            var a = emitter.position.clone();\n            var b = connector.position.clone();\n            var d = a.sub(b);\n            song.theremin.drag(d);\n            if (song.speed === 0) {\n                TweenLite.to(song, 0.5, {\n                    speed: 1,\n                    ease: Power2.easeOut,\n                    onUpdate: function () {\n                        song.setSpeed(song.speed);\n                    },\n                });\n            }\n        });\n        drag.addEventListener('dragend', function (e) {\n            dragging = false;\n            if (orbit) {\n                orbit.enabled = true;\n            }\n            if (song.speed !== 0) {\n                TweenLite.to(song, 0.5, {\n                    speed: 0,\n                    ease: Power2.easeOut,\n                    onUpdate: function () {\n                        song.setSpeed(song.speed);\n                    },\n                    onComplete: function () {\n                        song.theremin.stop();\n                        song.stop();\n                    },\n                });\n\n                TweenLite.to(emitter.rotation, 1, {\n                    y: Math.round(emitter.rotation.y / Math.PI * 2) * Math.PI / 2,\n                    ease: Power2.easeOut,\n                });\n\n                TweenLite.to(emitter.position, 1, {\n                    x: 55,\n                    z: 0,\n                    ease: Elastic.easeOut,\n                });\n\n                TweenLite.to(light.position, 1, {\n                    x: 35,\n                    z: -35,\n                    ease: Elastic.easeOut,\n                });\n            }\n        });\n\n        setTimeout(function () {\n            container.appendChild(renderer.domElement);\n            resize();\n        }, 100);\n    }\n\n    function animate(time) {\n        stats.begin();\n        var fps = getFps() || 60;\n        var speed33 = 0.0575959 * 60 / fps;\n        if (ring) {\n            var s = Math.abs(Math.sin(time * 0.001)) * (1 - song.speed);\n            ring.material.opacity = s;\n            ring.scale.set(1 + s * 0.5, 1 + s * 0.5, 1 + s * 0.5);\n        }\n        connector.rotation.y += speed33 * song.speed;\n        disc.rotation.z += speed33 * song.speed;\n        emitter.rotation.y += speed33 * song.speed;\n        cover.position.x = -25 - 90 * song.speed;\n        if (dragging) {\n            light.position.x += (emitter.position.x * -1 - light.position.x) / 20;\n            light.position.z += (emitter.position.z * -1 - light.position.z) / 20;\n        }\n        // collisions();\n        renderer.render(scene, camera);\n        stats.end();\n        requestAnimationFrame(animate);\n    }\n\n    function collisions() {\n        connectors.filter(function (c, i) {\n            c.on = false;\n            var origin = c.position.clone();\n            for (var v = 0; v < c.geometry.vertices.length; v++) {\n                var local = c.geometry.vertices[v].clone();\n                var global = local.applyMatrix4(c.matrix);\n                var direction = global.sub(c.position);\n                var ray = new THREE.Raycaster(origin, direction.clone().normalize());\n                var results = ray.intersectObjects(hittables);\n                if (results.length > 0 && results[0].distance < direction.length()) {\n                    c.volume = results[0].object.position.distanceTo(origin) / direction.length();\n                    c.on = true;\n                }\n            }\n            if (c.on) {\n                volume.set('volume', -100 + 100 * c.volume);\n                if (synth) {\n                    synth.triggerAttack('C4');\n                }\n            } else {\n                if (synth) {\n                    synth.triggerRelease();\n                }\n            }\n        });\n    }\n\n    function resize() {\n        camera.resize();\n        renderer.setSize(container.offsetWidth, container.offsetHeight);\n        renderer.clearDepth();\n    }\n\n    function getDiscTextures(type, size) {\n        size = size || 2048;\n        var w = size,\n            h = size;\n        var canvas = document.createElement('canvas');\n        canvas.width = w;\n        canvas.height = h;\n        var ctx = canvas.getContext('2d');\n        var x = w / 2;\n        var y = h / 2;\n        var from = size / 2 * 0.3,\n            to = size / 2 * 0.98,\n            i;\n\n        function circle(radius, fill, stroke, lineWidth) {\n            ctx.beginPath();\n            ctx.arc(x, y, radius, 0, 2 * Math.PI, false);\n            if (fill) {\n                ctx.fillStyle = fill;\n                ctx.fill();\n            }\n            if (stroke) {\n                ctx.lineWidth = lineWidth;\n                ctx.strokeStyle = stroke;\n                ctx.stroke();\n            }\n            ctx.closePath();\n        }\n        if (type === textureTypes.DIFFUSE) {\n            ctx.fillStyle = '#2f2d2b';\n            ctx.rect(0, 0, w, h);\n            ctx.fill();\n            circle(from, '#332d2a');\n        }\n        if (type === textureTypes.LIGHT) {\n            ctx.fillStyle = '#000000';\n            ctx.rect(0, 0, w, h);\n            ctx.fill();\n            for (i = from; i < to; i += 10 + Math.random() * 30) {\n                var r = i + Math.random() * 0.2;\n                var t = (20 + Math.random() * 30) / 2;\n                t = Math.min(t, to - r - 1) * 2;\n                circle(r, null, 'rgba(255, 255, 255, ' + Math.random() * 0.5 + ')', t);\n            }\n        }\n        if (type === textureTypes.BUMP) {\n            ctx.fillStyle = '#000000';\n            ctx.rect(0, 0, w, h);\n            ctx.fill();\n            for (i = from; i < to; i += 2) {\n                circle(i + Math.random() * 0.2, null, 'rgba(255, 255, 255, ' + Math.random() * 0.5 + ')', 0.6);\n            }\n        }\n        // THREE.ClampToEdgeWrapping - THREE.RepeatWrapping\n        var texture = new THREE.CanvasTexture(canvas, THREE.UVMapping, THREE.ClampToEdgeWrapping, THREE.ClampToEdgeWrapping, THREE.LinearFilter, THREE.LinearMipMapLinearFilter, THREE.RGBFormat, THREE.UnsignedByteType, 2);\n        if (DEBUG) {\n            canvas.setAttribute('style', 'top:' + (256 * T) + 'px;');\n            document.body.appendChild(canvas);\n        }\n        T++;\n        return texture;\n    }\n\n    function getCamera() {\n        var camera = new THREE.PerspectiveCamera(20, container.offsetWidth / container.offsetHeight, 0.01, 1000);\n        camera.position.set(0, 300, 0);\n        camera.lookAt(0, 0, 0);\n        camera.resize = function () {\n            camera.aspect = container.offsetWidth / container.offsetHeight;\n            camera.updateProjectionMatrix();\n            camera.fit(group, 1.2);\n        };\n        camera.fit = function (object, offset, up) {\n            offset = offset || 1.2;\n            up = up || new THREE.Vector3(0, 0, -1);\n            var box = new THREE.Box3();\n            var boxSize = new THREE.Vector3();\n            var center = new THREE.Vector3();\n            box.setFromObject(object);\n            box.getCenter(center);\n            box.applyMatrix4(camera.matrixWorldInverse);\n            box.getSize(boxSize);\n            var aspect = boxSize.x / boxSize.y;\n            var size = (camera.aspect > aspect) ? boxSize.y : boxSize.x;\n            if (camera.aspect < aspect) {\n                size /= camera.aspect;\n            }\n            size *= offset;\n            var z = size / 2 / Math.sin(camera.fov / 2 * RAD);\n            camera.position.normalize().multiplyScalar(z);\n            camera.up = up;\n            var distance = camera.position.distanceTo(center);\n            // console.log(camera.position, disc.position);\n            if (orbit) {\n                orbit.target = center;\n                orbit.maxDistance = distance + size;\n                orbit.update();\n            } else {\n                // camera.lookAt(center.x, center.y, center.z);\n                camera.far = distance + size;\n            }\n            camera.updateProjectionMatrix();\n        };\n        window.camera = camera;\n        scene.add(camera);\n        return camera;\n    }\n\n    function getOrthoCamera() {\n        var size = 80,\n            aspect = container.offsetWidth / container.offsetHeight,\n            w = size * aspect,\n            h = size;\n        var camera = new THREE.OrthographicCamera(w / -2, w / 2, h / 2, h / -2, -1000, 1000);\n        camera.position.set(0, 30, 0);\n        camera.lookAt(0, 0, 0);\n        camera.resize = function () {\n            aspect = container.offsetWidth / container.offsetHeight;\n            w = size * aspect;\n            h = size;\n            camera.left = w / -2;\n            camera.right = w / 2;\n            camera.top = h / 2;\n            camera.bottom = h / -2;\n            camera.updateProjectionMatrix();\n        };\n        window.camera = camera;\n        scene.add(camera);\n        return camera;\n    }\n\n    function getSoftShadowMaps(callback) {\n        http({\n            url: 'glsl/pcss.glsl',\n            onload: function (data) {\n                var shader = THREE.ShaderChunk.shadowmap_pars_fragment;\n                shader = shader.replace(\n                    '#ifdef USE_SHADOWMAP',\n                    '#ifdef USE_SHADOWMAP' + data\n                );\n                shader = shader.replace(\n                    '#if defined( SHADOWMAP_TYPE_PCF )',\n                    '\\nreturn PCSS(shadowMap, shadowCoord);\\n' + '#if defined( SHADOWMAP_TYPE_PCF )'\n                );\n                THREE.ShaderChunk.shadowmap_pars_fragment = shader;\n                if (typeof callback === 'function') {\n                    callback();\n                }\n            }\n        });\n    }\n\n    function getFps() {\n        var now = performance.now();\n        while (ticks.length > 0 && ticks[0] <= now - 1000) {\n            ticks.shift();\n        }\n        ticks.push(now);\n        fps = ticks.length;\n        return fps;\n    }\n\n    function http(options) {\n        var o = {\n            method: 'GET',\n            responseType: 'text',\n        };\n        if (!options || !options.url || !options.onload) {\n            return;\n        }\n        for (var p in options) {\n            o[p] = options[p];\n        }\n        var req = new XMLHttpRequest();\n        req.open(o.method, o.url, true);\n        req.responseType = o.responseType; // 'blob';\n        req.onload = function () {\n            if (this.status === 200) {\n                // var blob = this.response;\n                // var image = URL.createObjectURL(blob); // IE10+\n                o.onload(this.response);\n            }\n        };\n        if (o.onerror) {\n            req.onerror = o.onerror;\n        }\n        if (o.onprogress) {\n            req.onerror = o.onprogress;\n        }\n        req.send();\n    }\n\n    /*\n    function onWheel(e) {\n        var direction = e.deltaY / Math.abs(e.deltaY);\n        camera.position.z = camera.position.z + direction;\n        camera.lookAt(0, 0, 0);\n        camera.updateProjectionMatrix();\n        console.log('onWheel', direction);\n    }\n    window.addEventListener('wheel', onWheel);\n    */\n\n    window.addEventListener('resize', resize, false);\n\n}());"]}