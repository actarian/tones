{"version":3,"sources":["docs/js/app.js"],"names":["Detector","webgl","camera","scene","renderer","orbit","drag","light","geometry","material","plane","connector","emitter","ring","cover","disc","label","envMap","bumpMap","diffuseMap","roughnessMap","metalnessMap","DEBUG","SHADOW_SIZE","T","textureTypes","DIFFUSE","BUMP","LIGHT","ALPHA","performance","window","Date","ticks","song","Tone","Volume","filter","Filter","type","frequency","rolloff","Q","gain","toMaster","player","Player","url","loop","playbackRate","sync","start","Transport","timeSignature","bpm","value","loopStart","loopEnd","synth","DuoSynth","vibratoAmount","vibratoRate","portamento","harmonicity","volume","voice0","oscillator","envelope","attack","decay","sustain","release","filterEnvelope","baseFrequency","octaves","voice1","notes","note","effects","instruments","stop","pause","theremin","d","divideScalar","x","Math","abs","y","z","max","min","i","length","round","setNote","speed","set","triggerAttack","triggerRelease","setSpeed","getMp3","connectors","hittables","init","animate","addEventListener","resize","setSize","innerWidth","innerHeight","addGetWebGLMessage","THREE","Scene","add","AmbientLight","PerspectiveCamera","position","lookAt","aspect","updateProjectionMatrix","SpotLight","castShadow","shadow","mapSize","width","height","near","far","radius","PlaneGeometry","ShadowMaterial","opacity","side","DoubleSide","Mesh","rotation","PI","receiveShadow","TextureLoader","load","mapping","EquirectangularReflectionMapping","magFilter","LinearFilter","minFilter","LinearMipMapLinearFilter","SphereGeometry","MeshStandardMaterial","color","roughness","metalness","envMapIntensity","push","BoxGeometry","transparent","RingGeometry","getDiscTextures","map","bumpScale","WebGLRenderer","antialias","alpha","setPixelRatio","devicePixelRatio","shadowMap","enabled","gammaInput","gammaOutput","PCFSoftShadowMap","document","querySelector","appendChild","domElement","DragControls","e","a","clone","b","sub","TweenLite","to","ease","Power2","easeOut","onUpdate","onComplete","time","requestAnimationFrame","speed33","now","shift","getFps","s","sin","scale","nry","render","size","w","h","canvas","createElement","ctx","getContext","from","circle","fill","stroke","lineWidth","beginPath","arc","fillStyle","strokeStyle","closePath","rect","random","r","t","texture","CanvasTexture","UVMapping","ClampToEdgeWrapping","RGBFormat","UnsignedByteType","setAttribute","body"],"mappings":"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","file":"app.min.js","sourcesContent":["/* global window, document, console, Tone, TweenLite */\n\n(function () {\n    'use strict';\n\n    if (!Detector.webgl) {\n        Detector.addGetWebGLMessage();\n        return;\n    }\n\n    var DEBUG = false;\n    var USE_PCSS_SHADOWS = false;\n    var SHADOW_SIZE = 1024; // 2048;\n    var T = 0;\n    var textureTypes = {\n        DIFFUSE: 0,\n        BUMP: 1,\n        LIGHT: 2,\n        ALPHA: 3,\n    };\n\n    var performance = (window.performance || Date);\n    var ticks = [],\n        fps;\n\n    var volume = new Tone.Volume(-100);\n\n    var synth;\n    // synth = getSynth(volume);\n\n    // var song = getSong();\n    var song = getMp3();\n\n    var connectors = [];\n    var hittables = [];\n\n    var camera, perspectivecamera, orthocamera, scene, renderer, orbit, drag;\n    var light;\n    var geometry, material, mesh;\n    var plane, connector, emitter, ring, cover, disc, label;\n\n    var envMap, bumpMap, diffuseMap, roughnessMap, metalnessMap;\n\n    // soft shadow maps         \n    if (USE_PCSS_SHADOWS) {\n        getSoftShadowMaps(function () {\n            init();\n            animate();\n        });\n    } else {\n        init();\n        animate();\n    }\n\n    function init() {\n        // scene\n        scene = new THREE.Scene();\n        // scene.fog = new THREE.Fog(0x999999, 5, 100);\n        scene.add(new THREE.AmbientLight(0x444444));\n\n        // camera\n        camera = perspectivecamera = getCamera();\n\n        // camera\n        // camera = orthocamera = getOrthoCamera();\n\n        // light\n        // light = new THREE.PointLight(0xfefefe, 2, 100, 2);\n        light = new THREE.SpotLight(0xfefefe, 1, 1000, 1, 1, 0.1);\n        // light = new THREE.DirectionalLight(0xdfebff, 1.75);\n        light.position.set(35, 50, -35);\n        light.castShadow = true;\n        light.shadow.mapSize.width = SHADOW_SIZE;\n        light.shadow.mapSize.height = SHADOW_SIZE;\n        light.shadow.camera.near = 0.1;\n        light.shadow.camera.far = 500;\n        // light.shadow.bias = 0.0001;\n        light.shadow.radius = 1.0001;\n        scene.add(light);\n\n        // plane\n        geometry = new THREE.PlaneGeometry(500, 500, 25, 25);\n        material = new THREE.ShadowMaterial({\n            opacity: 0.25,\n            side: THREE.DoubleSide\n        });\n        /*\n        material = new THREE.MeshStandardMaterial({\n            color: 0xeeeeee,\n            roughtness: 1,\n            metalness: 0,\n            side: THREE.DoubleSide\n        });\n        */\n        plane = new THREE.Mesh(geometry, material);\n        plane.rotation.set(-Math.PI / 2, 0, 0);\n        plane.position.set(0, 0, -1);\n        plane.receiveShadow = true;\n        scene.add(plane);\n\n        // connector\n        envMap = new THREE.TextureLoader().load('img/envmap-sm.jpg');\n        envMap.mapping = THREE.EquirectangularReflectionMapping;\n        envMap.magFilter = THREE.LinearFilter;\n        envMap.minFilter = THREE.LinearMipMapLinearFilter;\n        // geometry = new THREE.BoxGeometry(10, 10, 10);\n        geometry = new THREE.SphereGeometry(1, 64, 64);\n        // material = new THREE.MeshNormalMaterial();\n        material = new THREE.MeshStandardMaterial({\n            color: 0x666666,\n            roughness: 0.2,\n            metalness: 0.95,\n            envMap: envMap,\n            envMapIntensity: 1,\n        });\n        connector = new THREE.Mesh(geometry, material);\n        connector.position.set(0, 1, 0);\n        connector.receiveShadow = false;\n        connector.castShadow = true;\n        scene.add(connector);\n        connectors.push(connector);\n\n        // emitter\n        geometry = new THREE.BoxGeometry(3, 3, 3);\n        material = new THREE.MeshStandardMaterial({\n            color: 0xffffff,\n            roughness: 0.6,\n            metalness: 0.1,\n            opacity: 1,\n            transparent: false,\n        });\n        /*\n        geometry = new THREE.SphereGeometry(2, 64, 64);\n        material = new THREE.MeshStandardMaterial({\n            color: 0xffffff,\n            roughness: 0.3,\n            metalness: 0.5,\n            envMap: envMap,\n            envMapIntensity: 1,\n        });\n        */\n        emitter = new THREE.Mesh(geometry, material);\n        // emitter.position.set(-35, 1.5, 35);\n        emitter.position.set(55, 1.5, 0);\n        emitter.receiveShadow = false;\n        emitter.castShadow = true;\n        // ring\n        if (true) {\n            geometry = new THREE.RingGeometry(3, 3.3, 32, 1);\n            material = new THREE.MeshStandardMaterial({\n                color: 0x3f3b38,\n                roughness: 0.9,\n                metalness: 0.1,\n                opacity: 0.0,\n                transparent: true,\n            });\n            ring = new THREE.Mesh(geometry, material);\n            ring.rotation.set(-Math.PI / 2, 0, 0);\n            ring.receiveShadow = false;\n            ring.castShadow = false;\n            emitter.add(ring);\n        }\n        //\n        scene.add(emitter);\n        hittables.push(emitter);\n\n        // disc\n        bumpMap = getDiscTextures(textureTypes.BUMP);\n        roughnessMap = getDiscTextures(textureTypes.LIGHT, 512);\n        diffuseMap = getDiscTextures(textureTypes.DIFFUSE, 512);\n        metalnessMap = getDiscTextures(textureTypes.LIGHT, 512);\n        geometry = new THREE.RingGeometry(12.1, 45, 64, 4);\n        // geometry = new THREE.CircleGeometry(45, 128);\n        material = new THREE.MeshStandardMaterial({\n            color: 0x2f2d2b,\n            map: diffuseMap,\n            bumpMap: bumpMap,\n            bumpScale: 0.02,\n            envMap: envMap,\n            // envMapIntensity: 1,\n            roughness: 1.0, //0.02,\n            roughnessMap: roughnessMap,\n            // roughnessMap: metalnessMap,\n            metalness: 1.0,\n            metalnessMap: metalnessMap,\n            // opacity: 1,\n            // transparent: false,\n            // side: THREE.DoubleSide\n        });\n        // material = new THREE.MeshNormalMaterial({ side: THREE.DoubleSide });\n        disc = new THREE.Mesh(geometry, material);\n        disc.position.set(0, 0.1, 0);\n        disc.rotation.set(-Math.PI / 2, 0, 0);\n        disc.receiveShadow = true;\n        disc.castShadow = true;\n        diffuseMap = new THREE.TextureLoader().load('img/disc.jpg');\n        geometry = new THREE.RingGeometry(1.3, 12, 64, 4);\n        // geometry = new THREE.CircleGeometry(12, 128);\n        material = new THREE.MeshStandardMaterial({\n            color: 0xffffff,\n            map: diffuseMap,\n            roughness: 0.6,\n            metalness: 0.4,\n        });\n        label = new THREE.Mesh(geometry, material);\n        label.position.set(0, 0, 0);\n        label.receiveShadow = true;\n        label.castShadow = true;\n        disc.add(label);\n        scene.add(disc);\n\n        // cover\n        diffuseMap = new THREE.TextureLoader().load('img/cover.jpg');\n        geometry = new THREE.PlaneGeometry(90, 90, 32, 32);\n        material = new THREE.MeshStandardMaterial({\n            color: 0xefebe8,\n            map: diffuseMap,\n            roughness: 0.6,\n            metalness: 0.1,\n            opacity: 1,\n            transparent: false,\n        });\n        cover = new THREE.Mesh(geometry, material);\n        cover.rotation.set(-Math.PI / 2, 0, 0);\n        cover.position.set(-25, 2, 0);\n        cover.receiveShadow = true;\n        cover.castShadow = true;\n        scene.add(cover);\n\n        // renderer\n        renderer = new THREE.WebGLRenderer({\n            antialias: true,\n            alpha: true,\n        });\n        renderer.setPixelRatio(window.devicePixelRatio);\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        renderer.shadowMap.enabled = true;\n        renderer.gammaInput = true;\n        renderer.gammaOutput = true;\n        // renderer.shadowMap.type = THREE.BasicShadowMap; // 0\n        // renderer.shadowMap.type = THREE.PCFShadowMap; // 1\n        renderer.shadowMap.type = THREE.PCFSoftShadowMap; // 2  \n\n        document.querySelector('.section-scene').appendChild(renderer.domElement);\n\n        // controls\n        /*\n        orbit = new THREE.OrbitControls(camera);\n        orbit.update();\n        */\n\n        drag = new THREE.DragControls(hittables, camera, renderer.domElement);\n        drag.addEventListener('dragstart', function (e) {\n            if (orbit) {\n                orbit.enabled = false;\n            }\n            song.start();\n            song.theremin.start();\n        });\n        drag.addEventListener('drag', function (e) {\n            var a = emitter.position.clone();\n            var b = connector.position.clone();\n            var d = a.sub(b);\n            song.theremin.drag(d);\n            if (song.speed === 0) {\n                TweenLite.to(song, 0.5, {\n                    speed: 1,\n                    ease: Power2.easeOut,\n                    onUpdate: function () {\n                        song.setSpeed(song.speed);\n                    },\n                });\n            }\n        });\n        drag.addEventListener('dragend', function (e) {\n            if (orbit) {\n                orbit.enabled = true;\n            }\n            if (song.speed !== 0) {\n                TweenLite.to(song, 0.5, {\n                    speed: 0,\n                    ease: Power2.easeOut,\n                    onUpdate: function () {\n                        song.setSpeed(song.speed);\n                    },\n                    onComplete: function () {\n                        song.theremin.stop();\n                        song.stop();\n                    },\n                });\n            }\n        });\n    }\n\n    function animate(time) {\n        requestAnimationFrame(animate);\n        var fps = getFps() || 60;\n        var speed33 = 0.0575959 * 60 / fps;\n        if (ring) {\n            var s = Math.abs(Math.sin(time * 0.001)) * (1 - song.speed);\n            ring.material.opacity = s;\n            ring.scale.set(1 + s * 0.5, 1 + s * 0.5, 1 + s * 0.5);\n        }\n        cover.position.x = -25 - 90 * song.speed;\n        if (song.speed > 0) {\n            connector.rotation.y += speed33 * song.speed;\n            disc.rotation.z += speed33 * song.speed;\n            emitter.rotation.y += speed33 * song.speed;\n            light.position.x += (emitter.position.x * -1 - light.position.x) / 20;\n            light.position.z += (emitter.position.z * -1 - light.position.z) / 20;\n        } else {\n            emitter.position.x += (55 - emitter.position.x) / 20;\n            emitter.position.z += (0 - emitter.position.z) / 20;\n            var nry = Math.round(emitter.rotation.y / Math.PI * 2) * Math.PI / 2;\n            emitter.rotation.y += (nry - emitter.rotation.y) / 20;\n        }\n        // collisions();\n        renderer.render(scene, camera);\n    }\n\n    function collisions() {\n        connectors.filter(function (c, i) {\n            c.on = false;\n            var origin = c.position.clone();\n            for (var v = 0; v < c.geometry.vertices.length; v++) {\n                var local = c.geometry.vertices[v].clone();\n                var global = local.applyMatrix4(c.matrix);\n                var direction = global.sub(c.position);\n                var ray = new THREE.Raycaster(origin, direction.clone().normalize());\n                var results = ray.intersectObjects(hittables);\n                if (results.length > 0 && results[0].distance < direction.length()) {\n                    c.volume = results[0].object.position.distanceTo(origin) / direction.length();\n                    c.on = true;\n                }\n            }\n            if (c.on) {\n                volume.set('volume', -100 + 100 * c.volume);\n                if (synth) {\n                    synth.triggerAttack('C4');\n                }\n            } else {\n                if (synth) {\n                    synth.triggerRelease();\n                }\n            }\n        });\n    }\n\n    function resize() {\n        camera.resize();\n        renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n\n    function getDiscTextures(type, size) {\n        size = size || 2048;\n        var w = size,\n            h = size;\n        var canvas = document.createElement('canvas');\n        canvas.width = w;\n        canvas.height = h;\n        var ctx = canvas.getContext('2d');\n        var x = w / 2;\n        var y = h / 2;\n        var from = size / 2 * 0.3,\n            to = size / 2 * 0.98,\n            i;\n\n        function circle(radius, fill, stroke, lineWidth) {\n            ctx.beginPath();\n            ctx.arc(x, y, radius, 0, 2 * Math.PI, false);\n            if (fill) {\n                ctx.fillStyle = fill;\n                ctx.fill();\n            }\n            if (stroke) {\n                ctx.lineWidth = lineWidth;\n                ctx.strokeStyle = stroke;\n                ctx.stroke();\n            }\n            ctx.closePath();\n        }\n        if (type === textureTypes.DIFFUSE) {\n            ctx.fillStyle = '#2f2d2b';\n            ctx.rect(0, 0, w, h);\n            ctx.fill();\n            circle(from, '#332d2a');\n        }\n        if (type === textureTypes.LIGHT) {\n            ctx.fillStyle = '#000000';\n            ctx.rect(0, 0, w, h);\n            ctx.fill();\n            for (i = from; i < to; i += 10 + Math.random() * 30) {\n                var r = i + Math.random() * 0.2;\n                var t = (20 + Math.random() * 30) / 2;\n                t = Math.min(t, to - r - 1) * 2;\n                circle(r, null, 'rgba(255, 255, 255, ' + Math.random() * 0.5 + ')', t);\n            }\n        }\n        if (type === textureTypes.BUMP) {\n            ctx.fillStyle = '#000000';\n            ctx.rect(0, 0, w, h);\n            ctx.fill();\n            for (i = from; i < to; i += 2) {\n                circle(i + Math.random() * 0.2, null, 'rgba(255, 255, 255, ' + Math.random() * 0.5 + ')', 0.6);\n            }\n        }\n        // THREE.ClampToEdgeWrapping - THREE.RepeatWrapping\n        var texture = new THREE.CanvasTexture(canvas, THREE.UVMapping, THREE.ClampToEdgeWrapping, THREE.ClampToEdgeWrapping, THREE.LinearFilter, THREE.LinearMipMapLinearFilter, THREE.RGBFormat, THREE.UnsignedByteType, 2);\n        if (DEBUG) {\n            canvas.setAttribute('style', 'top:' + (256 * T) + 'px;');\n            document.body.appendChild(canvas);\n        }\n        T++;\n        return texture;\n    }\n\n    function getCamera() {\n        var camera = new THREE.PerspectiveCamera(20, window.innerWidth / window.innerHeight, 0.01, 1000);\n        camera.position.set(0, 300, 0);\n        camera.lookAt(0, 0, 0);\n        camera.resize = function () {\n            camera.aspect = window.innerWidth / window.innerHeight;\n            camera.updateProjectionMatrix();\n        };\n        window.camera = camera;\n        scene.add(camera);\n        return camera;\n    }\n\n    function getOrthoCamera() {\n        var size = 80,\n            aspect = window.innerWidth / window.innerHeight,\n            w = size * aspect,\n            h = size;\n        var camera = new THREE.OrthographicCamera(w / -2, w / 2, h / 2, h / -2, -1000, 1000);\n        camera.position.set(0, 30, 0);\n        camera.lookAt(0, 0, 0);\n        camera.resize = function () {\n            aspect = window.innerWidth / window.innerHeight;\n            w = size * aspect;\n            h = size;\n            camera.left = w / -2;\n            camera.right = w / 2;\n            camera.top = h / 2\n            camera.bottom = h / -2;\n            camera.updateProjectionMatrix();\n        };\n        window.camera = camera;\n        scene.add(camera);\n        return camera;\n    }\n\n    function getSoftShadowMaps(callback) {\n        http({\n            url: 'glsl/pcss.glsl',\n            onload: function (data) {\n                var shader = THREE.ShaderChunk.shadowmap_pars_fragment;\n                shader = shader.replace(\n                    '#ifdef USE_SHADOWMAP',\n                    '#ifdef USE_SHADOWMAP' + data\n                );\n                shader = shader.replace(\n                    '#if defined( SHADOWMAP_TYPE_PCF )',\n                    '\\nreturn PCSS(shadowMap, shadowCoord);\\n' + '#if defined( SHADOWMAP_TYPE_PCF )'\n                );\n                THREE.ShaderChunk.shadowmap_pars_fragment = shader;\n                if (typeof callback === 'function') {\n                    callback();\n                }\n            }\n        });\n    }\n\n    function getFps() {\n        var now = performance.now();\n        while (ticks.length > 0 && ticks[0] <= now - 1000) {\n            ticks.shift();\n        }\n        ticks.push(now);\n        fps = ticks.length;\n        return fps;\n    }\n\n    function getSynth(volume) {\n        var synth = new Tone.Synth({\n            oscillator: {\n                type: 'amtriangle',\n                harmonicity: 0.5,\n                modulationType: 'sine'\n            },\n            envelope: {\n                attackCurve: 'exponential',\n                attack: 0.05,\n                decay: 0.2,\n                sustain: 0.2,\n                release: 1.5,\n            },\n            portamento: 0.05\n        });\n\n        /*\n        var delay = new Tone.PingPongDelay({\n            delayTime: '2t',\n            feedback: 0.4,\n            wet: 0.25\n        });\n        delay.chain(volume, Tone.Master);\n        synth.connect(delay);\n        */\n\n        synth.chain(volume, Tone.Master);\n        //play a middle 'C' for the duration of an 8th note\n        // synth.triggerAttackRelease('C4', '8n');\n        return synth;\n    }\n\n    function getMp3() {\n\n        // FILTER\n        var filter = new Tone.Filter({\n            type: 'lowpass',\n            frequency: 350,\n            rolloff: -12,\n            Q: 1,\n            gain: 0\n        }).toMaster();\n\n        var player = new Tone.Player({\n            url: \"audio/The-Blinding-Shiver-128.[mp3|ogg]\",\n            loop: true,\n            playbackRate: 0.1,\n        }).toMaster().sync().start('0');\n\n        Tone.Transport.timeSignature = 4;\n        Tone.Transport.bpm.value = 98;\n        Tone.Transport.loop = true;\n        Tone.Transport.loopStart = '0';\n        Tone.Transport.loopEnd = '98:5';\n\n        // SYNTH\n        var synth = new Tone.DuoSynth({\n            vibratoAmount: 0.5,\n            vibratoRate: 5,\n            portamento: 0.1,\n            harmonicity: 1.005,\n            volume: 1,\n            voice0: {\n                volume: -2,\n                oscillator: {\n                    type: 'sawtooth'\n                },\n                filter: {\n                    Q: 1,\n                    type: 'lowpass',\n                    rolloff: -24\n                },\n                envelope: {\n                    attack: 0.01,\n                    decay: 0.25,\n                    sustain: 0.4,\n                    release: 1.2\n                },\n                filterEnvelope: {\n                    attack: 0.001,\n                    decay: 0.05,\n                    sustain: 0.3,\n                    release: 2,\n                    baseFrequency: 100,\n                    octaves: 4\n                }\n            },\n            voice1: {\n                volume: -10,\n                oscillator: {\n                    type: 'sawtooth'\n                },\n                filter: {\n                    Q: 2,\n                    type: 'bandpass',\n                    rolloff: -12\n                },\n                envelope: {\n                    attack: 0.25,\n                    decay: 4,\n                    sustain: 0.1,\n                    release: 0.8\n                },\n                filterEnvelope: {\n                    attack: 0.05,\n                    decay: 0.05,\n                    sustain: 0.7,\n                    release: 2,\n                    baseFrequency: 5000,\n                    octaves: -1.5\n                }\n            }\n        }).toMaster();\n        synth.notes = ['C2', 'E2', 'G2', 'A2', 'C3', 'D3', 'E3', 'G3', 'A3', 'B3', 'C4', 'D4', 'E4', 'G4', 'A4', 'B4', 'C5'];\n        synth.note = synth.notes[0];\n\n        var song = {\n            effects: {\n                filter: filter,\n            },\n            instruments: {\n                player: player,\n                synth: synth,\n            },\n            start: function () {\n                Tone.Transport.start(\"+0.1\");\n            },\n            stop: function () {\n                Tone.Transport.pause();\n            },\n            theremin: {\n                drag: function (d) {\n                    d = d.divideScalar(10);\n                    var x = Math.abs(d.x);\n                    var y = Math.abs(d.z);\n                    x = Math.max(0, Math.min(1, x));\n                    y = Math.max(0, Math.min(1, y));\n                    var i = Math.max(0, Math.min(synth.notes.length - 1, Math.round(y * synth.notes.length - 1)));\n                    var note = synth.notes[synth.notes.length - 1 - i];\n                    if (synth.note !== note) {\n                        synth.note = note;\n                        synth.setNote(note);\n                    }\n                    synth.vibratoAmount.value = x * 10;\n                    if (song.speed === 1) {\n                        filter.set('detune', -10000 + (20000 * x));\n                    }\n                    // console.log(song.speed);\n                },\n                start: function () {\n                    synth.triggerAttack(synth.note);\n                },\n                stop: function () {\n                    synth.triggerRelease();\n                },\n            },\n            speed: 0,\n            setSpeed: function (x) {\n                x = Math.max(0, Math.min(1, x));\n                player.set('playbackRate', 0.1 + 0.99 * x);\n                filter.set('detune', -10000 + (10000 * x));\n            },\n        };\n        return song;\n\n    }\n\n    function getSong() {\n\n        // FILTER\n        var filter = new Tone.Filter({\n            type: 'lowpass',\n            frequency: 350,\n            rolloff: -12,\n            Q: 1,\n            gain: 0\n        }).toMaster();\n\n        // COMPRESSOR\n        var compressor = new Tone.Compressor({\n            threshold: -30,\n            ratio: 6,\n            attack: 0.3,\n            release: 0.1\n        }).toMaster();\n\n        // DISTORTION\n        var distortion = new Tone.Distortion({\n            distortion: 0.4,\n            wet: 0.4\n        });\n\n        // HATS\n        var hats = new Tone.Player({\n            url: 'audio/505/hh.[mp3|ogg]',\n            volume: -10,\n            retrigger: true,\n            fadeOut: 0.05\n        }).chain(distortion, compressor);\n        hats.loop = new Tone.Loop({\n            callback: function (time) {\n                hats.start(time).stop(time + 0.05);\n            },\n            interval: '16n',\n            probability: 0.8\n        }).start('1m');\n\n        // SNARE\n        var snare = new Tone.Player({\n            url: 'audio/505/snare.[mp3|ogg]',\n            retrigger: true,\n            fadeOut: 0.1\n        }).chain(distortion, compressor);\n        snare.part = new Tone.Sequence(function (time, velocity) {\n            snare.volume.value = Tone.gainToDb(velocity);\n            snare.start(time).stop(time + 0.1);\n        }, [null, 1, null, [1, 0.3]]).start(0);\n\n        // KICK\n        var kick = new Tone.MembraneSynth({\n            pitchDecay: 0.01,\n            octaves: 6,\n            oscillator: {\n                type: 'square4'\n            },\n            envelope: {\n                attack: 0.001,\n                decay: 0.2,\n                sustain: 0\n            }\n        }).connect(compressor);\n        kick.part = new Tone.Sequence(function (time, probability) {\n            if (Math.random() < probability) {\n                kick.triggerAttack('C1', time);\n            }\n        }, [1, [1, [null, 0.3]], 1, [1, [null, 0.5]], 1, 1, 1, [1, [null, 0.8]]], '2n').start(0);\n\n        // BASS\n        var bass = new Tone.FMSynth({\n            harmonicity: 1,\n            modulationIndex: 3.5,\n            carrier: {\n                oscillator: {\n                    type: 'custom',\n                    partials: [0, 1, 0, 2]\n                },\n                envelope: {\n                    attack: 0.08,\n                    decay: 0.3,\n                    sustain: 0,\n                },\n            },\n            modulator: {\n                oscillator: {\n                    type: 'square'\n                },\n                envelope: {\n                    attack: 0.1,\n                    decay: 0.2,\n                    sustain: 0.3,\n                    release: 0.01\n                },\n            }\n        }).toMaster();\n        bass.part = new Tone.Part(function (time, event) {\n            if (Math.random() < event.prob) {\n                bass.triggerAttackRelease(event.note, event.dur, time);\n            }\n        }, [{\n            time: '0:0',\n            note: 'C2',\n            dur: '4n.',\n            prob: 1\n        }, {\n            time: '0:2',\n            note: 'C2',\n            dur: '8n',\n            prob: 0.6\n        }, {\n            time: '0:2.6666',\n            note: 'C2',\n            dur: '8n',\n            prob: 0.4\n        }, {\n            time: '0:3.33333',\n            note: 'C2',\n            dur: '8n',\n            prob: 0.9\n        }, {\n            time: '1:0',\n            note: 'C2',\n            dur: '4n.',\n            prob: 1\n        }, {\n            time: '1:2',\n            note: 'C2',\n            dur: '8n',\n            prob: 0.6\n        }, {\n            time: '1:2.6666',\n            note: 'C2',\n            dur: '8n',\n            prob: 0.4\n        }, {\n            time: '1:3.33333',\n            note: 'E2',\n            dur: '8n',\n            prob: 0.9\n        }, {\n            time: '2:0',\n            note: 'F2',\n            dur: '4n.',\n            prob: 1\n        }, {\n            time: '2:2',\n            note: 'F2',\n            dur: '8n',\n            prob: 0.6\n        }, {\n            time: '2:2.6666',\n            note: 'F2',\n            dur: '8n',\n            prob: 0.4\n        }, {\n            time: '2:3.33333',\n            note: 'F2',\n            dur: '8n',\n            prob: 0.9\n        }, {\n            time: '3:0',\n            note: 'F2',\n            dur: '4n.',\n            prob: 1\n        }, {\n            time: '3:2',\n            note: 'F2',\n            dur: '8n',\n            prob: 0.6\n        }, {\n            time: '3:2.6666',\n            note: 'F2',\n            dur: '8n',\n            prob: 0.4\n        }, {\n            time: '3:3.33333',\n            note: 'B1',\n            dur: '8n',\n            prob: 0.9\n        }]).start(0);\n        bass.part.loop = true;\n        bass.part.loopEnd = '4m';\n\n        // SYNTH\n        var synth = new Tone.DuoSynth({\n            vibratoAmount: 0.5,\n            vibratoRate: 5,\n            portamento: 0.1,\n            harmonicity: 1.005,\n            volume: 5,\n            voice0: {\n                volume: -2,\n                oscillator: {\n                    type: 'sawtooth'\n                },\n                filter: {\n                    Q: 1,\n                    type: 'lowpass',\n                    rolloff: -24\n                },\n                envelope: {\n                    attack: 0.01,\n                    decay: 0.25,\n                    sustain: 0.4,\n                    release: 1.2\n                },\n                filterEnvelope: {\n                    attack: 0.001,\n                    decay: 0.05,\n                    sustain: 0.3,\n                    release: 2,\n                    baseFrequency: 100,\n                    octaves: 4\n                }\n            },\n            voice1: {\n                volume: -10,\n                oscillator: {\n                    type: 'sawtooth'\n                },\n                filter: {\n                    Q: 2,\n                    type: 'bandpass',\n                    rolloff: -12\n                },\n                envelope: {\n                    attack: 0.25,\n                    decay: 4,\n                    sustain: 0.1,\n                    release: 0.8\n                },\n                filterEnvelope: {\n                    attack: 0.05,\n                    decay: 0.05,\n                    sustain: 0.7,\n                    release: 2,\n                    baseFrequency: 5000,\n                    octaves: -1.5\n                }\n            }\n        }).toMaster();\n        synth.notes = ['C2', 'E2', 'G2', 'A2', 'C3', 'D3', 'E3', 'G3', 'A3', 'B3', 'C4', 'D4', 'E4', 'G4', 'A4', 'B4', 'C5'];\n        synth.note = synth.notes[0];\n\n        Tone.Transport.bpm.value = 1;\n\n        var song = {\n            effects: {\n                filter: filter,\n                compressor: compressor,\n                distortion: distortion,\n            },\n            instruments: {\n                hats: hats,\n                snare: snare,\n                kick: kick,\n                bass: bass,\n                synth: synth,\n            },\n            start: function () {\n                Tone.Transport.start('+0.1');\n            },\n            stop: function () {\n                Tone.Transport.stop();\n            },\n            theremin: {\n                drag: function (d) {\n                    d = d.divideScalar(10);\n                    var x = Math.abs(d.x);\n                    var y = Math.abs(d.z);\n                    x = Math.max(0, Math.min(1, x));\n                    y = Math.max(0, Math.min(1, y));\n                    var i = Math.max(0, Math.min(synth.notes.length - 1, Math.round(y * synth.notes.length - 1)));\n                    var note = synth.notes[synth.notes.length - 1 - i];\n                    if (synth.note !== note) {\n                        synth.note = note;\n                        synth.setNote(note);\n                    }\n                    synth.vibratoAmount.value = x * 10;\n                },\n                start: function () {\n                    synth.triggerAttack(synth.note);\n                },\n                stop: function () {\n                    synth.triggerRelease();\n                },\n            },\n            speed: 0,\n            setSpeed: function (x) {\n                x = Math.max(0, Math.min(1, x));\n                Tone.Transport.bpm.value = 1 + Math.round(x * 124);\n                filter.set('detune', -10000 + (10000 * x));\n            },\n        };\n        return song;\n    }\n\n    function http(options) {\n        var o = {\n            method: 'GET',\n            responseType: 'text',\n        };\n        if (!options || !options.url || !options.onload) {\n            return;\n        }\n        for (var p in options) {\n            o[p] = options[p];\n        }\n        var req = new XMLHttpRequest();\n        req.open(o.method, o.url, true);\n        req.responseType = o.responseType; // 'blob';\n        req.onload = function () {\n            if (this.status === 200) {\n                // var blob = this.response;\n                // var image = URL.createObjectURL(blob); // IE10+\n                o.onload(this.response);\n            }\n        };\n        if (o.onerror) {\n            req.onerror = o.onerror;\n        }\n        if (o.onprogress) {\n            req.onerror = o.onprogress;\n        }\n        req.send();\n    }\n\n    /*\n    function onWheel(e) {\n        var direction = e.deltaY / Math.abs(e.deltaY);\n        camera.position.z = camera.position.z + direction;\n        camera.lookAt(0, 0, 0);\n        camera.updateProjectionMatrix();\n        console.log('onWheel', direction);\n    }\n    window.addEventListener('wheel', onWheel);\n    */\n\n    window.addEventListener('resize', resize, false);\n\n}());"]}